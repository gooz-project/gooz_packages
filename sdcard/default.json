{
    "name": "sdcard",
    "codes": [
        {
            "filename": "sdcard.py",
            "code": "import os, utime, _threadpkglineflagfrom machine import Pin, SoftSPIpkglineflagfrom app.SDCard.sdcardlib import SDCardpkglineflagpkglineflagsaved_sds = []pkglineflagexit_flag = 0pkglineflagpkglineflagdef register(cmd_arr):pkglineflag    try:pkglineflag        key = \"\"pkglineflag        value = \"\"pkglineflag        key_list = []pkglineflag        value_list = []pkglineflag        registered_key = []pkglineflag        registered_value = []pkglineflag        for i in cmd_arr:pkglineflag            if i[0] == \"-\":pkglineflag                for a in range(1,len(i)):pkglineflag                    if i[a] == \"=\":pkglineflag                        breakpkglineflag                    key += i[a]pkglineflag                key_list.append(key)pkglineflag                door = 0pkglineflag                for index in range(1,len(i)):pkglineflag                    if i[index] == \")\":pkglineflag                        door = 0pkglineflag                    if door == 1:pkglineflag                        value += i[index]pkglineflag                    elif i[index] == \"(\":pkglineflag                        door = 1pkglineflag                value_list.append(value)pkglineflag                key = \"\"pkglineflag                value = \"\"pkglineflag        registered_key.append(key_list)pkglineflag        registered_value.append(value_list)pkglineflag        temp_counter = 0pkglineflag        temp = {\"name\":\"\",\"sck\":\"\",\"miso\":\"\",\"mosi\":\"\",\"cs\":\"\",\"baudrate\":\"\"}pkglineflag        pkglineflag        if not 'spi' in key_list:pkglineflag            for pairs in key_list:pkglineflag                if pairs == \"name\":pkglineflag                    temp[\"name\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                elif pairs == \"sck\":pkglineflag                    temp[\"sck\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                elif pairs == \"miso\":pkglineflag                    temp[\"miso\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                elif pairs == \"mosi\":pkglineflag                    temp[\"mosi\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                elif pairs == \"cs\":pkglineflag                    temp[\"cs\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                elif pairs == \"baudrate\":pkglineflag                    temp[\"baudrate\"] = value_list[temp_counter]pkglineflag                    temp_counter += 1pkglineflag                pkglineflag        if temp[\"name\"] == \"\" or temp[\"sck\"] == \"\" or temp[\"miso\"] == \"\" or temp[\"mosi\"] == \"\" or temp[\"cs\"] == \"\":pkglineflag            print(\"Missing necessary argument(s)!\")pkglineflag            returnpkglineflag        pkglineflag        isNameExist = Falsepkglineflag        for mySD in saved_sds:pkglineflag            if mySD[\"name\"] == temp[\"name\"]:pkglineflag                isNameExist = Truepkglineflag        if isNameExist:pkglineflag            print(f'The SD card named \"{temp[\"name\"]}\" already exists')pkglineflag            return    pkglineflag        pkglineflag        saved_sds.append(temp)pkglineflag        print(saved_sds)pkglineflag    except:pkglineflag        print(\"Unknown error while registering SD pin!\")pkglineflagdef show():pkglineflag    print(saved_sds)pkglineflagpkglineflagdef update(cmd_arr):pkglineflag    if not len(cmd_arr) > 3:pkglineflag        print(\"Missing Argument(s)\\nWhat will be updated?\")pkglineflag        returnpkglineflag    pkglineflag    exported_pin ={\"name\":\"\",\"sck\":\"\",\"miso\":\"\",\"mosi\":\"\",\"cs\":\"\",\"baudrate\":\"\"}pkglineflag    for mySD in saved_sds:pkglineflag        if mySD[\"name\"] == cmd_arr[2]:pkglineflag            exported_pin[\"name\"] = mySD[\"name\"]pkglineflag            exported_pin[\"sck\"] = mySD[\"sck\"]pkglineflag            exported_pin[\"miso\"] = mySD[\"miso\"]pkglineflag            exported_pin[\"mosi\"] = mySD[\"mosi\"]pkglineflag            exported_pin[\"cs\"] = mySD[\"cs\"]pkglineflag            exported_pin[\"baudrate\"] = mySD[\"baudrate\"]pkglineflag            saved_sds.remove(mySD)pkglineflag        pkglineflag    if exported_pin[\"name\"] == \"\":pkglineflag        print(f'There is no SD pin named \"{exported_pin[\"name\"]}\"!')pkglineflag        returnpkglineflag    pkglineflag    key = \"\"pkglineflag    value = \"\"pkglineflag    key_list = []pkglineflag    value_list = []pkglineflag    registered_key = []pkglineflag    registered_value = []pkglineflag    for i in cmd_arr:pkglineflag        if i[0] == \"-\":pkglineflag            for a in range(1,len(i)):pkglineflag                if i[a] == \"=\":pkglineflag                    breakpkglineflag                key += i[a]pkglineflag            key_list.append(key)pkglineflag            door = 0pkglineflag            for index in range(1,len(i)):pkglineflag                if i[index] == \")\":pkglineflag                    door = 0pkglineflag                if door == 1:pkglineflag                    value += i[index]pkglineflag                elif i[index] == \"(\":pkglineflag                    door = 1pkglineflag            value_list.append(value)pkglineflag            key = \"\"pkglineflag            value = \"\"pkglineflag    registered_key.append(key_list)pkglineflag    registered_value.append(value_list)pkglineflag    temp_counter = 0pkglineflag    new_pin = exported_pinpkglineflag    pkglineflag    for pairs in key_list:pkglineflag        if pairs == \"name\":pkglineflag            new_pin[\"name\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag        elif pairs == \"sck\":pkglineflag            new_pin[\"sck\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag        elif pairs == \"miso\":pkglineflag            new_pin[\"miso\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag        elif pairs == \"mosi\":pkglineflag            new_pin[\"mosi\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag        elif pairs == \"cs\":pkglineflag            new_pin[\"cs\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag        elif pairs == \"baudrate\":pkglineflag            new_pin[\"baudrate\"] = value_list[temp_counter]pkglineflag            temp_counter += 1pkglineflag    saved_sds.append(new_pin)pkglineflag    print(saved_sds)pkglineflag    pkglineflagdef delete(cmd_arr):pkglineflag    try:pkglineflag        if not len(cmd_arr) > 2:pkglineflag            print(\"Missing Argument!\\nMissing pin name for deleting.\")pkglineflag            returnpkglineflag        exported_pin={'name':''}pkglineflag        for mySD in saved_sds:pkglineflag            if mySD[\"name\"] == cmd_arr[2]:pkglineflag                exported_pin[\"name\"] = mySD[\"name\"]pkglineflag                saved_sds.remove(mySD)pkglineflag                print(saved_sds)pkglineflag        if exported_pin[\"name\"] == \"\":pkglineflag            print(f'There is no SD pin named \"{cmd_arr[2]}\"!')pkglineflag    except:pkglineflag        print(\"Unknown error while deleting SD pin!\")pkglineflagpkglineflagdef mount(cmd_arr):pkglineflag    exported_pin ={\"name\":\"\",\"sck\":\"\",\"miso\":\"\",\"mosi\":\"\",\"cs\":\"\",\"baudrate\":\"\"}pkglineflag    for mySD in saved_sds:pkglineflag        if mySD[\"name\"] == cmd_arr[2]:pkglineflag            exported_pin[\"name\"] = mySD[\"name\"]pkglineflag            exported_pin[\"sck\"] = mySD[\"sck\"]pkglineflag            exported_pin[\"miso\"] = mySD[\"miso\"]pkglineflag            exported_pin[\"mosi\"] = mySD[\"mosi\"]pkglineflag            exported_pin[\"cs\"] = mySD[\"cs\"]pkglineflag            exported_pin[\"baudrate\"] = mySD[\"baudrate\"]pkglineflag    if exported_pin[\"name\"] == \"\":pkglineflag        print(f'There is no SD pin named \"{cmd_arr[2]}\"!')pkglineflag        returnpkglineflag    pkglineflag    spisd = SoftSPI(miso=Pin(int(exported_pin[\"miso\"])), mosi=Pin(int(exported_pin[\"mosi\"])), sck=Pin(int(exported_pin[\"sck\"])))pkglineflag    sd = SDCard(spisd, Pin(int(exported_pin[\"cs\"])))pkglineflag    vfs = os.VfsFat(sd)pkglineflag    if len(cmd_arr) == 3 and not 'as' in cmd_arr:pkglineflag        os.mount(vfs, f'/{exported_pin[\"name\"]}')   pkglineflag        print(os.listdir(f'/{exported_pin[\"name\"]}'))pkglineflag        pkglineflag    elif len(cmd_arr) > 3 and 'as' in cmd_arr:pkglineflag        file_name_list = cmd_arr[cmd_arr.index('as')+1:]pkglineflag        file_name=''pkglineflag        for c in file_name_list:pkglineflag            file_name += cpkglineflag        os.mount(vfs,f'/{file_name}')pkglineflag        print(os.listdir(f'/{file_name}'))pkglineflag        pkglineflagdef umount(cmd_arr):pkglineflag    os.umount(f'/{cmd_arr[2]}')pkglineflag"
        },
        {
            "filename": "sdcardlib.py",
            "code": "from micropython import constpkglineflagimport timepkglineflagpkglineflag_CMD_TIMEOUT = const(100)pkglineflagpkglineflag_R1_IDLE_STATE = const(1 << 0)pkglineflag_R1_ILLEGAL_COMMAND = const(1 << 2)pkglineflag_TOKEN_CMD25 = const(0xFC)pkglineflag_TOKEN_STOP_TRAN = const(0xFD)pkglineflag_TOKEN_DATA = const(0xFE)pkglineflagpkglineflagclass SDCard:pkglineflag    def __init__(self, spi, cs, baudrate=1320000):pkglineflag        self.spi = spipkglineflag        self.cs = cspkglineflagpkglineflag        self.cmdbuf = bytearray(6)pkglineflag        self.dummybuf = bytearray(512)pkglineflag        self.tokenbuf = bytearray(1)pkglineflag        for i in range(512):pkglineflag            self.dummybuf[i] = 0xFFpkglineflag        self.dummybuf_memoryview = memoryview(self.dummybuf)pkglineflagpkglineflag        self.init_card(baudrate)pkglineflagpkglineflag    def init_spi(self, baudrate):pkglineflag        try:pkglineflag            master = self.spi.MASTERpkglineflag        except AttributeError:pkglineflag            self.spi.init(baudrate=baudrate, phase=0, polarity=0)pkglineflag        else:pkglineflag            self.spi.init(master, baudrate=baudrate, phase=0, polarity=0)pkglineflagpkglineflag    def init_card(self, baudrate):pkglineflagpkglineflag        self.cs.init(self.cs.OUT, value=1)pkglineflag        self.init_spi(100000)pkglineflag        for i in range(16):pkglineflag            self.spi.write(b\"\\xff\")pkglineflag        for _ in range(5):pkglineflag            if self.cmd(0, 0, 0x95) == _R1_IDLE_STATE:pkglineflag                breakpkglineflag        else:pkglineflag            raise OSError(\"no SD card\")pkglineflagpkglineflag        r = self.cmd(8, 0x01AA, 0x87, 4)pkglineflag        if r == _R1_IDLE_STATE:pkglineflag            self.init_card_v2()pkglineflag        elif r == (_R1_IDLE_STATE | _R1_ILLEGAL_COMMAND):pkglineflag            self.init_card_v1()pkglineflag        else:pkglineflag            raise OSError(\"couldn't determine SD card version\")pkglineflagpkglineflag        if self.cmd(9, 0, 0, 0, False) != 0:pkglineflag            raise OSError(\"no response from SD card\")pkglineflag        csd = bytearray(16)pkglineflag        self.readinto(csd)pkglineflag        if csd[0] & 0xC0 == 0x40:pkglineflag            self.sectors = ((csd[8] << 8 | csd[9]) + 1) * 1024pkglineflag        elif csd[0] & 0xC0 == 0x00:pkglineflag            c_size = csd[6] & 0b11 | csd[7] << 2 | (csd[8] & 0b11000000) << 4pkglineflag            c_size_mult = ((csd[9] & 0b11) << 1) | csd[10] >> 7pkglineflag            self.sectors = (c_size + 1) * (2 ** (c_size_mult + 2))pkglineflag        else:pkglineflag            raise OSError(\"SD card CSD format not supported\")pkglineflag        if self.cmd(16, 512, 0) != 0:pkglineflag            raise OSError(\"can't set 512 block size\")pkglineflag        self.init_spi(baudrate)pkglineflagpkglineflag    def init_card_v1(self):pkglineflag        for i in range(_CMD_TIMEOUT):pkglineflag            self.cmd(55, 0, 0)pkglineflag            if self.cmd(41, 0, 0) == 0:pkglineflag                self.cdv = 512pkglineflag                returnpkglineflag        raise OSError(\"timeout waiting for v1 card\")pkglineflagpkglineflag    def init_card_v2(self):pkglineflag        for i in range(_CMD_TIMEOUT):pkglineflag            time.sleep_ms(50)pkglineflag            self.cmd(58, 0, 0, 4)pkglineflag            self.cmd(55, 0, 0)pkglineflag            if self.cmd(41, 0x40000000, 0) == 0:pkglineflag                self.cmd(58, 0, 0, 4)pkglineflag                self.cdv = 1pkglineflag                returnpkglineflag        raise OSError(\"timeout waiting for v2 card\")pkglineflagpkglineflag    def cmd(self, cmd, arg, crc, final=0, release=True, skip1=False):pkglineflag        self.cs(0)pkglineflag        buf = self.cmdbufpkglineflag        buf[0] = 0x40 | cmdpkglineflag        buf[1] = arg >> 24pkglineflag        buf[2] = arg >> 16pkglineflag        buf[3] = arg >> 8pkglineflag        buf[4] = argpkglineflag        buf[5] = crcpkglineflag        self.spi.write(buf)pkglineflagpkglineflag        if skip1:pkglineflag            self.spi.readinto(self.tokenbuf, 0xFF)pkglineflagpkglineflag        for i in range(_CMD_TIMEOUT):pkglineflag            self.spi.readinto(self.tokenbuf, 0xFF)pkglineflag            response = self.tokenbuf[0]pkglineflag            if not (response & 0x80):pkglineflag                for j in range(final):pkglineflag                    self.spi.write(b\"\\xff\")pkglineflag                if release:pkglineflag                    self.cs(1)pkglineflag                    self.spi.write(b\"\\xff\")pkglineflag                return responsepkglineflag        self.cs(1)pkglineflag        self.spi.write(b\"\\xff\")pkglineflag        return -1pkglineflagpkglineflag    def readinto(self, buf):pkglineflag        self.cs(0)pkglineflag        for i in range(_CMD_TIMEOUT):pkglineflag            self.spi.readinto(self.tokenbuf, 0xFF)pkglineflag            if self.tokenbuf[0] == _TOKEN_DATA:pkglineflag                breakpkglineflag            time.sleep_ms(1)pkglineflag        else:pkglineflag            self.cs(1)pkglineflag            raise OSError(\"timeout waiting for response\")pkglineflagpkglineflag        mv = self.dummybuf_memoryviewpkglineflag        if len(buf) != len(mv):pkglineflag            mv = mv[: len(buf)]pkglineflag        self.spi.write_readinto(mv, buf)pkglineflag        self.spi.write(b\"\\xff\")pkglineflag        self.spi.write(b\"\\xff\")pkglineflagpkglineflag        self.cs(1)pkglineflag        self.spi.write(b\"\\xff\")pkglineflagpkglineflag    def write(self, token, buf):pkglineflag        self.cs(0)pkglineflag        self.spi.read(1, token)pkglineflag        self.spi.write(buf)pkglineflag        self.spi.write(b\"\\xff\")pkglineflag        self.spi.write(b\"\\xff\")pkglineflag        if (self.spi.read(1, 0xFF)[0] & 0x1F) != 0x05:pkglineflag            self.cs(1)pkglineflag            self.spi.write(b\"\\xff\")pkglineflag            returnpkglineflagpkglineflag        while self.spi.read(1, 0xFF)[0] == 0:pkglineflag            passpkglineflagpkglineflag        self.cs(1)pkglineflag        self.spi.write(b\"\\xff\")pkglineflagpkglineflag    def write_token(self, token):pkglineflag        self.cs(0)pkglineflag        self.spi.read(1, token)pkglineflag        self.spi.write(b\"\\xff\")pkglineflag        while self.spi.read(1, 0xFF)[0] == 0x00:pkglineflag            passpkglineflagpkglineflag        self.cs(1)pkglineflag        self.spi.write(b\"\\xff\")pkglineflagpkglineflag    def readblocks(self, block_num, buf):pkglineflag        nblocks = len(buf) // 512pkglineflag        assert nblocks and not len(buf) % 512, \"Buffer length is invalid\"pkglineflag        if nblocks == 1:pkglineflag            if self.cmd(17, block_num * self.cdv, 0, release=False) != 0:pkglineflag                self.cs(1)pkglineflag                raise OSError(5)pkglineflag            self.readinto(buf)pkglineflag        else:pkglineflag            if self.cmd(18, block_num * self.cdv, 0, release=False) != 0:pkglineflag                self.cs(1)pkglineflag                raise OSError(5)  # EIOpkglineflag            offset = 0pkglineflag            mv = memoryview(buf)pkglineflag            while nblocks:pkglineflag                self.readinto(mv[offset : offset + 512])pkglineflag                offset += 512pkglineflag                nblocks -= 1pkglineflag            if self.cmd(12, 0, 0xFF, skip1=True):pkglineflag                raise OSError(5)pkglineflagpkglineflag    def writeblocks(self, block_num, buf):pkglineflag        nblocks, err = divmod(len(buf), 512)pkglineflag        assert nblocks and not err, \"Buffer length is invalid\"pkglineflag        if nblocks == 1:pkglineflag            if self.cmd(24, block_num * self.cdv, 0) != 0:pkglineflag                raise OSError(5)pkglineflag            self.write(_TOKEN_DATA, buf)pkglineflag        else:pkglineflag            if self.cmd(25, block_num * self.cdv, 0) != 0:pkglineflag                raise OSError(5)pkglineflag            offset = 0pkglineflag            mv = memoryview(buf)pkglineflag            while nblocks:pkglineflag                self.write(_TOKEN_CMD25, mv[offset : offset + 512])pkglineflag                offset += 512pkglineflag                nblocks -= 1pkglineflag            self.write_token(_TOKEN_STOP_TRAN)pkglineflagpkglineflag    def ioctl(self, op, arg):pkglineflag        if op == 4:pkglineflag            return self.sectorspkglineflag"
        }
    ],
    "managersnip": "pkglineflag    elif cmd_arr[0]=='sd':pkglineflag        global sdcard_pypkglineflag        import app.SDCard.sdcard as sdcard_pypkglineflag        if cmd_arr[1] =='var':pkglineflag            global sdcard_pypkglineflag            sdcard_py.register(cmd_arr)pkglineflag        elif cmd_arr[1] =='update':pkglineflag            global sdcard_pypkglineflag            sdcard_py.update(cmd_arr)pkglineflag        elif cmd_arr[1] == 'del' or cmd_arr[1] == 'delete':pkglineflag            global sdcard_pypkglineflag            sdcard_py.delete(cmd_arr)pkglineflag        elif cmd_arr[1] == 'ls' or cmd_arr[1] =='show':pkglineflag            global sdcard_pypkglineflag            sdcard_py.show()pkglineflag        elif cmd_arr[1] == 'mount':pkglineflag            global sdcard_pypkglineflag            sdcard_py.mount(cmd_arr)pkglineflag        elif cmd_arr[1] =='umount':pkglineflag            global sdcard_pypkglineflag            sdcard_py.umount(cmd_arr)pkglineflag"
}
