{
    "name": "mpu6050",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pin,SoftI2C,RTCpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagfrom app.mpu6050.mpu6050 import accelpkglineflagpkglineflagconfig_path=\"//app/mpu6050/mpu6050config.json\"pkglineflagpkglineflagclass MPU6050Usage():pkglineflagpkglineflag    @staticmethodpkglineflag    def error_undefined_pin(pin_name):pkglineflag        return LOG.error(f'There is no MPU6050 pin named \"{pin_name}\" !')pkglineflag    pkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        return LOG.info('\\nUsage:\\n->mpu6050 var --name [PIN_NAME] --scl [SCL_PIN] --sda [SDA_PIN]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def read_usage():pkglineflag        return LOG.info('\\nUsage:\\n->mpu6050 read [PIN_NAME] --gyro x,y,z --acceleration x,y,z --temperature [STATUS]')+\"\\n\"+LOG.info('If temperature is desired to be measured [STATUS] should be \"on\",otherwise --temperature does not need to be entered.')+\"\\n\"+LOG.info('Only the parameters that are desirable to be measured should be entered.For example, if the x direction of gyro is desired to be measured,\"--gyro x\" is enough.')pkglineflag    pkglineflag    @staticmethodpkglineflag    def listen_usage():pkglineflag        message = LOG.info('\\nUsage:\\n->mpu6050 listen [PIN_NAME] --gyro x,y,z --acceleration x,y,z --temperature [STATUS] --loop [MEASURING_LOOP] --delay [SLEEP_TIME] --file [FILE_NAME]')+\"\\n\"pkglineflag        message += LOG.info('If temperature is desired to be measured [STATUS] should be \"on\",otherwise --temperature does not need to be entered.')+\"\\n\"pkglineflag        message += LOG.info('Only the parameters that are desirable to be measured should be entered.')+\"\\n\"pkglineflag        message += LOG.info('If [FILE_NAME] is empty, it will not be saved')+\"\\n\"pkglineflag        message += LOG.info('[SLEEP_TIME] is not necessary! Default value: 1 second')+\"\\n\"pkglineflag        message += LOG.info('[MEASURING_LOOP] is not necessary! If not entered, loop lasts until \"thread stop [THREAD_ID]\" command')+\"\\n\"pkglineflag        message += LOG.info('[THREAD_ID] is seen with \"thread show\" command')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        return LOG.info('Usage -> mpu6050 delete [PIN_NAME]')+\"\\n\"+LOG.info('deletes registered mpu6050 pin named [PIN_NAME]')+\"\\n\"+LOG.info('To delete all registered mpu6050 pins -> mpu6050 delete all')pkglineflag    pkglineflag    @staticmethodpkglineflag    def update_usage():pkglineflag        return LOG.info('Usage -> mpu6050 update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')+\"\\n\"+LOG.info('updates the [VALUE_TO_CHANGE] value of the mpu6050 pin named [PIN_NAME] to [NEW_VALUE]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        return LOG.info('Usage -> mpu6050 show')+\"\\n\"+LOG.info('shows all registered mpu6050 pins')+\"\\n\"+LOG.info('Usage -> mpu6050 show [PARAMETER]:[VALUE_TO_SEARCH_FOR]')+\"\\n\"+LOG.info('shows specific mpu6050 pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','read','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        message = 'Commands: \\n'pkglineflag        for command in command_list:pkglineflag            message += command + \"\\n\"pkglineflag        message += LOG.info('For more information about commands -> mpu6050 help [COMMAND]')pkglineflag        return messagepkglineflag    try:pkglineflag        return eval(f'MPU6050Usage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        return LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagpkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"mpu6050\",\"--name\":\"\",\"--scl\":\"\",\"--sda\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            return LOG.error('Error while registering MPU6050 pin!')+\"\\n\"+LOG.error('Missing Argument(s)!')pkglineflag    PinCommands(cmds, path=config_path,pin_type=\"mpu6050\").register(blueprint)pkglineflag    return LOG.debug('The new MPU6050 pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflagpkglineflagpkglineflagdef delete(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"mpu6050\", pin_name=cmds[2]).delete()pkglineflagpkglineflagpkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"mpu6050\",pin_name=cmds[2]).update()pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"mpu6050\").show()pkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+\"\\n\"+LOG.info(\"You can use 'mpu6050 help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return 'OK!'pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running MPU6050 command\")+\"\\n\"+LOG.error(f'Is the \"{cmds[1]}\" a MPU6050 command?')+\"\\n\"+LOG.info(\"You can use 'mpu6050 help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running MPU6050 command!\")+\"\\n\"+LOG.error(str(ex))+\"\\n\"+LOG.error(\"You can use 'mpu6050 help' for available commands!\")pkglineflagpkglineflagdef read(cmds):pkglineflag    global n_valspkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"mpu6050\").get_pin(cmds[0],cmds[2])pkglineflag    blueprint = {\"--gyro\":\"\",\"--acceleration\":\"\",\"--temperature\":\"\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    try:pkglineflag        i2c = SoftI2C(scl=Pin(int(pin[\"--scl\"])), sda=Pin(int(pin[\"--sda\"])))pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    mpu = accel(i2c)pkglineflag    raw_ints = mpu.get_raw_values()pkglineflag    vals = {}pkglineflag    try:pkglineflag        if not blueprint[\"--gyro\"] == \"\":pkglineflag            gylist = blueprint[\"--gyro\"].split(\",\")pkglineflag            for i in gylist:pkglineflag                if i == \"x\":pkglineflag                    vals[\"GyX\"] = mpu.bytes_toint(raw_ints[8], raw_ints[9])pkglineflag                elif i == \"y\":pkglineflag                    vals[\"GyY\"] = mpu.bytes_toint(raw_ints[10], raw_ints[11])pkglineflag                elif i == \"z\":pkglineflag                    vals[\"GyZ\"] = mpu.bytes_toint(raw_ints[12], raw_ints[13])pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    try:pkglineflag        if not blueprint[\"--acceleration\"] == \"\":pkglineflag            accellist = blueprint[\"--acceleration\"].split(\",\")pkglineflag            for i in accellist:pkglineflag                if i == \"x\":pkglineflag                    vals[\"AcX\"] = mpu.bytes_toint(raw_ints[0], raw_ints[1])pkglineflag                elif i == \"y\":pkglineflag                    vals[\"AcY\"] = mpu.bytes_toint(raw_ints[2], raw_ints[3])pkglineflag                elif i == \"z\":pkglineflag                    vals[\"AcZ\"] = mpu.bytes_toint(raw_ints[4], raw_ints[5])pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    try:pkglineflag        if blueprint[\"--temperature\"] == \"on\":pkglineflag            vals[\"Tmp\"] = mpu.bytes_toint(raw_ints[6], raw_ints[7]) / 340.00 + 36.53pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    if '-n' in cmds:pkglineflag        return str(vals)pkglineflag    else:pkglineflag        n_vals = valspkglineflag        return LOG.info(str(vals))pkglineflagpkglineflagdef listen(cmds):pkglineflag    global cmds2pkglineflag    if not len(cmds) > 2:pkglineflag        return LOG.error(\"Please enter pin name!\")pkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--loop\":\"-1\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf={'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'mpu6050_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"mpu6050\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        cmds2 = ['mpu6050','read']pkglineflag        cmds2 += cmds[2:]pkglineflag        _gooz_start_function_thread(_mpu6050_listen_thread,(pin,listen_conf),thread_conf)pkglineflag        del listen_confpkglineflag        return \"The pin is listened\"pkglineflag    except Exception as ex:pkglineflag        del listen_confpkglineflag        return LOG.error(ex)pkglineflag    pkglineflagdef _mpu6050_listen_thread(pin,conf):pkglineflag    try:pkglineflag        vals = read(cmds2)pkglineflag        print(vals)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    try:pkglineflag        if conf[\"--file\"] != \"\":pkglineflag            f = open(conf[\"--file\"],\"a\")pkglineflag            f.write(\"SCL Pin:{}, SDA Pin:{}, Pin Name:{}, Measurement:{}    {}\\n\".format(pin[\"--scl\"],pin[\"--sda\"],pin[\"--name\"],n_vals,RTC().datetime()))pkglineflag            f.close()pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag"
        },
        {
            "filename": "mpu6050.py",
            "code": "from machine import Pin,SoftI2Cpkglineflagpkglineflagclass accel():pkglineflag    def __init__(self, i2c, addr=0x68):pkglineflag        self.iic = i2cpkglineflag        self.addr = addrpkglineflag        self.iic.start()pkglineflag        self.iic.writeto(self.addr, bytearray([107, 0]))pkglineflag        self.iic.stop()pkglineflagpkglineflag    def get_raw_values(self):pkglineflag        self.iic.start()pkglineflag        a = self.iic.readfrom_mem(self.addr, 0x3B, 14)pkglineflag        self.iic.stop()pkglineflag        return apkglineflagpkglineflag    def bytes_toint(self, firstbyte, secondbyte):pkglineflag        if not firstbyte & 0x80:pkglineflag            return firstbyte << 8 | secondbytepkglineflag        return - (((firstbyte ^ 255) << 8) | (secondbyte ^ 255) + 1)pkglineflag"
        },
        {
            "filename": "mpu6050config.json",
            "code": "[]"
        }
    ]
}