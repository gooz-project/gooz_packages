{
    "name": "dht",
    "codes": [
        {
            "filename": "main.py",
            "code": "import dhtpkglineflagfrom machine import Pin,RTCpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommands pkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagimport utimepkglineflagconfig_path=\"//app/dht/dhtconfig.json\"pkglineflagclass DHTErrors():pkglineflag    def type_error():#type must be 11 or 22pkglineflag        LOG.error('Error while registering DHT Pin!')pkglineflag        LOG.error('DHT type must be 11 or 22!')pkglineflag    def float_error(sleep_time):#sleep time must be floatpkglineflag        LOG.error('Error while listening DHT Pin!')pkglineflag        LOG.error(f'Is type of \"{sleep_time}\" a float?')pkglineflag    def undefined_pin_name(pin_name):pkglineflag        print(\"\")pkglineflag        LOG.error(f'There is no DHT pin named \"{pin_name}\" !')pkglineflag    def register_usage():pkglineflag        LOG.info('\\nUsage:\\ndht register --name \"pin_name\" --pin \"pin_number\" --type \"DHT_type\"')pkglineflag        LOG.info('DHT type can be 11 or 22')pkglineflag    def listen_usage():pkglineflag        LOG.info('Usage -> dht listen \"pin_name\" --measure \"measure_type\" --delay \"sleep_time\" --file \"file_name\" --end \"end_character\"')pkglineflag        LOG.info('measure_type can be temp, hum and both')pkglineflag        LOG.info('measure_type is not necessary! Default value: both')pkglineflag        LOG.info('sleep_time is not necessary! Default value: 1 second')pkglineflag        LOG.info(\"file_name is not necessary! If empty it will not be saved\")pkglineflag        LOG.info(\"end_character is not necessary! Default value: '\\\\n' \")pkglineflag    def measure_usage():pkglineflag        LOG.info('\\nUsage:\\ndht measure \"pin_name\"')pkglineflag        LOG.info('DHT measure command simply measures current temperature and humidity')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\ndht delete \"pin_name\"')pkglineflag        LOG.info('DHT delete command deletes registered DHT pins by pin_name')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\ndht show')pkglineflag        LOG.info('DHT show command simply prints registered DHT pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['register','show','delete','update','measure','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        returnpkglineflag    try:pkglineflag        exec('DHTErrors.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflag    pkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'dht help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running DHT command\")pkglineflag        LOG.error('Is the \"{}\" a DHT command?'.format(cmds[1]))pkglineflag        LOG.info(\"You can use 'dht help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running DHT command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'dht help' for avaible commands!\")pkglineflag    pkglineflag#------pkglineflagdef register(cmds):pkglineflag    blueprint={\"pinType\":\"dht\",\"--name\":\"\",\"--pin\":\"\",\"--type\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    missing = Falsepkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering dht pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            DHTErrors.register_usage()pkglineflag            missing=Truepkglineflag            breakpkglineflag    if missing:pkglineflag        returnpkglineflag    if not(temp[\"--type\"] == \"11\" or temp[\"--type\"] == \"22\"):pkglineflag        DHTErrors.type_error()pkglineflag        del temppkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"dht\").register(blueprint) #type = 11,22pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new DHT pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"dht\").show()pkglineflag    pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,config_path,pin_type=\"dht\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The dht pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            DHTErrors.undefined_pin_name()pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        DHTErrors.delete_usage()pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"dht\",pin_name=cmds[2]).update()pkglineflag    pkglineflag#------pkglineflagdef measure(cmds):pkglineflag    try:pkglineflag        runner_pin = PinCommands(cmds,path=config_path,pin_type=\"dht\").get_pin(cmds[0],cmds[2])pkglineflag        d = eval('dht.DHT{}(Pin(int({})))'.format(runner_pin[\"--type\"],runner_pin[\"--pin\"]))pkglineflag        utime.sleep(0.1)pkglineflag        d.measure()pkglineflag        utime.sleep(0.1)pkglineflag        print(\"Temp: \" +str(d.temperature()))pkglineflag        print(\"Hum:\"+ str(d.humidity()))pkglineflag    except KeyError:pkglineflag        DHTErrors.undefined_pin_name(cmds[2])pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag pkglineflagdef listen(cmds):pkglineflag    if not len(cmds) > 2:pkglineflag        LOG.error(\"Please enter pin name!\")pkglineflag        returnpkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--date\":\"1\",\"--end\":\"\\n\",\"--loop\":\"-1\",\"--measure\":\"both\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf={'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'dht_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dht\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _gooz_start_function_thread(_dht_listen_thread,(pin,listen_conf),thread_conf)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise expkglineflag    del listen_confpkglineflag    del thread_confpkglineflag            pkglineflagdef _dht_listen_thread(pins,conf={}):pkglineflag    try:pkglineflag        runner_pin = eval('dht.DHT{}(Pin(int({})))'.format(pins[\"--type\"],pins[\"--pin\"]))pkglineflag        if conf[\"--file\"] == \"\":pkglineflag            runner_pin.measure()pkglineflag            if conf[\"--measure\"]==\"both\":pkglineflag                print('Temperature of the DHT pin named \"{}\" {}: '.format(pins[\"--name\"],runner_pin.temperature()))pkglineflag                print('Humidity of the DHT pin named \"{}\" : {}'.format(pins[\"--name\"],runner_pin.humidity()))pkglineflag            elif conf[\"--measure\"]==\"temp\":pkglineflag                print('Temperature of the DHT pin named \"{}\" {}: '.format(pins[\"--name\"],runner_pin.temperature()))pkglineflag            elif conf[\"--measure\"]==\"hum\":pkglineflag                 print('Humidity of the DHT pin named \"{}\" : {}'.format(pins[\"--name\"],runner_pin.humidity()))pkglineflag        else:pkglineflag            runner_pin.measure()pkglineflag            if conf[\"--date\"] == \"1\":pkglineflag                m_rtc = RTC()pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"({}, {}) {}{}\".format(runner_pin.temperature(),runner_pin.humidity(),m_rtc.datetime(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag            else:pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"({}, {}){}\".format(runner_pin.temperature(),runner_pin.humidity(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise ex"
        }
    ]
}