{
    "name": "dht",
    "codes": [
        {
            "filename": "main.py",
            "code": "import dhtpkglineflagfrom machine import Pin,RTCpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommands pkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagimport utimepkglineflagpkglineflagconfig_path=\"//app/dht/dhtconfig.json\"pkglineflagpkglineflagclass DHTErrors():pkglineflag    @staticmethod pkglineflag    def type_error():#type must be 11 or 22pkglineflag        return LOG.error('Error while registering DHT Pin!\\nDHT type must be 11 or 22!')pkglineflag    @staticmethodpkglineflag    def float_error(sleep_time):#sleep time must be floatpkglineflag        return LOG.error(f'Error while listening DHT Pin!\\nIs type of \"{sleep_time}\" a float?')pkglineflag    @staticmethodpkglineflag    def undefined_pin_name(pin_name):pkglineflag        return LOG.error(f'There is no DHT pin named \"{pin_name}\" !')pkglineflag    pkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        return LOG.info('\\nUsage: -> dht var --name \"pin_name\" --pin \"pin_number\" --type \"DHT_type\"\\nDHT type can be 11 or 22')pkglineflag    pkglineflag    @staticmethodpkglineflag    def listen_usage():pkglineflag        return LOG.info(\"\"\"Usage ->pkglineflagdht listen \"pin_name\" --measure \"measure_type\" --delay \"sleep_time\" --file \"file_name\" --end \"end_character\"pkglineflagmeasure_type can be temp, hum and bothpkglineflagmeasure_type is not necessary! Default value: bothpkglineflagsleep_time is not necessary! Default value: 1 secondpkglineflagfile_name is not necessary! If empty it will not be savedpkglineflagend_character is not necessary! Default value: '\\\\n' \"\"\")pkglineflag    pkglineflag    @staticmethodpkglineflag    def measure_usage():pkglineflag        return LOG.info('\\nUsage:\\ndht measure \"pin_name\"\\nDHT measure command simply measures current temperature and humidity')pkglineflag    pkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        return LOG.info('\\nUsage:\\ndht delete \"pin_name\"\\nDHT delete command deletes registered DHT pins by pin_name')pkglineflag    pkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        return LOG.info('\\nUsage:\\ndht show\\nDHT show command simply prints registered DHT pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','measure','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        commands = 'Commands: 'pkglineflag        commands += ' '.join(command_list)pkglineflag        return LOG.info(commands)pkglineflag    try:pkglineflag        return eval('DHTErrors.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        return LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflag    pkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        message = LOG.error(\"Please enter a command!\")+'\\n'+LOG.info(\"You can use 'dht help' for available commands!\")pkglineflag        return messagepkglineflag    if cmds[1][0] == '_':pkglineflag        return LOG.error('There is no command!')pkglineflag    try:pkglineflag        return eval(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        message = LOG.error(\"There is a problem while running DHT command\") pkglineflag        message += LOG.error('\\nIs the \"{}\" a DHT command?'.format(cmds[1]))pkglineflag        message += LOG.info(\"\\nYou can use 'dht help' for available commands!\")pkglineflag        pkglineflag        return messagepkglineflag    pkglineflag    except Exception as ex:pkglineflag        return LOG.error(f\"There is a problem while running DHT command!\\n{ex}\\nYou can use 'dht help' for avaible commands!\")pkglineflagpkglineflag    pkglineflag#------pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"dht\",\"--name\":\"\",\"--pin\":\"\",\"--type\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    missing = Falsepkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            message = LOG.error('Error while registering dht pin!')pkglineflag            message += LOG.error('\\nMissing Argument(s)!')pkglineflag            DHTErrors.register_usage()pkglineflag            missing=Truepkglineflag            return messagepkglineflag            breakpkglineflag    if missing:pkglineflag        return 'DHT pin could not found'pkglineflag    if not(temp[\"--type\"] == \"11\" or temp[\"--type\"] == \"22\"):pkglineflag        del temppkglineflag        return DHTErrors.type_error()pkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"dht\").register(blueprint) #type = 11,22pkglineflag    if blueprint:   pkglineflag        return LOG.info('The new DHT pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,config_path,pin_type=\"dht\").show()pkglineflag    pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,config_path,pin_type=\"dht\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            return LOG.debug('The dht pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            return DHTErrors.undefined_pin_name()pkglineflag    except IndexError:pkglineflag        return \"Missing arg(s)\\n\" + DHTErrors.delete_usage()pkglineflag        pkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,config_path,pin_type=\"dht\",pin_name=cmds[2]).update()pkglineflag    pkglineflag#------pkglineflagdef measure(cmds):pkglineflag    try:pkglineflag        runner_pin = PinCommands(cmds,path=config_path,pin_type=\"dht\").get_pin(cmds[0],cmds[2])pkglineflag        if not runner_pin:pkglineflag            return LOG.error(f\"There is no DHT pin named {cmds[2]}\")pkglineflag        d = eval('dht.DHT{}(Pin(int({})))'.format(runner_pin[\"--type\"],runner_pin[\"--pin\"]))pkglineflag        utime.sleep(0.1)pkglineflag        d.measure()pkglineflag        utime.sleep(0.1)pkglineflag        message = \"\"pkglineflag        if ('-t' in cmds and '-h' in cmds) or ('-t' not in cmds and '-h' not in cmds):pkglineflag            message = str(d.temperature())+' '+str(d.humidity())pkglineflag        elif '-t' in cmds:pkglineflag            message = d.temperature()pkglineflag        elif '-h' in cmds:pkglineflag            message = d.humidity()pkglineflag        pkglineflag        if '-n' in cmds:pkglineflag            return messagepkglineflag        elif ('-t' in cmds and '-h' in cmds) or ('-t' not in cmds and '-h' not in cmds):pkglineflag            message = f'Temperature: {message.split(\" \")[0]}\\nHumidity: {message.split(\" \")[1]}'pkglineflag        elif '-t' in cmds:pkglineflag            message = f'Temperature: {message}'pkglineflag        elif '-h' in cmds:pkglineflag            message = f'Humidity: {message}'pkglineflag        return LOG.info(message)pkglineflag        pkglineflag    except KeyError:pkglineflag        return DHTErrors.undefined_pin_name(cmds[2])pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflagpkglineflagpkglineflagdef listen(cmds):pkglineflag    if not len(cmds) > 2:pkglineflag        return LOG.error(\"Please enter pin name!\") pkglineflag    pkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--date\":\"1\",\"--end\":\"\\n\",\"--loop\":\"-1\",\"--measure\":\"both\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf={'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'dht_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dht\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _gooz_start_function_thread(_dht_listen_thread,(pin,listen_conf),thread_conf)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    del listen_confpkglineflag    del thread_confpkglineflag            pkglineflagdef _dht_listen_thread(pins,conf={}):pkglineflag    try:pkglineflag        runner_pin = eval('dht.DHT{}(Pin(int({})))'.format(pins[\"--type\"],pins[\"--pin\"]))pkglineflag        if conf[\"--file\"] == \"\":pkglineflag            runner_pin.measure()pkglineflag            if '-t' in conf.keys() and '-h' in conf.keys():pkglineflag                message = 'Temperature of the DHT pin named \"{}\" {}: '.format(pins[\"--name\"],runner_pin.temperature())pkglineflag                message += '\\nHumidity of the DHT pin named \"{}\" : {}'.format(pins[\"--name\"],runner_pin.humidity())pkglineflag            elif '-t' in conf.keys():pkglineflag                message = 'Temperature of the DHT pin named \"{}\" {}: '.format(pins[\"--name\"],runner_pin.temperature())pkglineflag            elif '-h' in conf.keys():pkglineflag                message = 'Humidity of the DHT pin named \"{}\" : {}'.format(pins[\"--name\"],runner_pin.humidity())pkglineflag            return LOG.info(message)pkglineflag        else:pkglineflag            runner_pin.measure()pkglineflag            if conf[\"--date\"] == \"1\":pkglineflag                m_rtc = RTC()pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"({}, {}) {}{}\".format(runner_pin.temperature(),runner_pin.humidity(),m_rtc.datetime(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag            else:pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"({}, {}){}\".format(runner_pin.temperature(),runner_pin.humidity(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)"
        }
    ]
}
