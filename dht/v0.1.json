{
    "name": "dht",
    "codes": [
        {
            "filename": "dhtconfig.json",
            "code": "[]"
        },
        {
            "filename": "main.py",
            "code": "import dhtpkglineflagfrom machine import Pinpkglineflagimport utimepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagimport _threadpkglineflagpkglineflagexit_listen_flag = Falsepkglineflagpkglineflagclass DHTErrors():pkglineflag    def type_error():#type must be 11 or 22pkglineflag        LOG.error('Error while registering DHT Pin!')pkglineflag        LOG.error('DHT type must be 11 or 22!')pkglineflag    def float_error(sleep_time):#sleep time must be floatpkglineflag        LOG.error('Error while listening DHT Pin!')pkglineflag        LOG.error(f'Is type of \"{sleep_time}\" a float?')pkglineflag    def undefined_pin_name(pin_name):pkglineflag        print(\"\")pkglineflag        LOG.error(f'There is no DHT pin named \"{pin_name}\" !')pkglineflag    def register_usage():pkglineflag        LOG.info('\\nUsage:\\ndht register --name \"pin_name\" --pin \"pin_number\" --type \"DHT_type\"')pkglineflag        LOG.info('DHT type can be 11 or 22')pkglineflag    def listen_usage():pkglineflag        LOG.info('\\nUsage:\\ndht listen \"pin_name\" \"measure_type\" \"sleep_time\"')pkglineflag        LOG.info('measure_type can be temp, hum and both')pkglineflag        LOG.info('measure_type is not necessary! Default value: both')pkglineflag        LOG.info('sleep_time is not necessary! Default value: 1 second')pkglineflag    def measure_usage():pkglineflag        LOG.info('\\nUsage:\\ndht measure \"pin_name\"')pkglineflag        LOG.info('DHT measure command simply measures current temperature and humidity')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\ndht delete \"pin_name\"')pkglineflag        LOG.info('DHT delete command deletes registered DHT pins by pin_name')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\ndht show')pkglineflag        LOG.info('DHT show command simply prints registered DHT pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['register','show','delete','update','measure','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'DHTErrors.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflag    pkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'dht help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running DHT command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a DHT command?')pkglineflag        LOG.info(\"You can use 'dht help' for available commands!\")pkglineflag    pkglineflagdef register(cmds):pkglineflag    blueprint={\"--name\":\"\",\"--pin\":\"\",\"--type\":\"\"} #type: 11, 22pkglineflag    missing_arg = Falsepkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in blueprint:pkglineflag        if blueprint[key] == \"\":pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        LOG.error(\"Missing Argument(s)\")pkglineflag        DHTErrors.register_usage()pkglineflag        returnpkglineflag    elif not(blueprint[\"--type\"] == \"11\" or blueprint[\"--type\"] == \"22\"):pkglineflag        DHTErrors.type_error()pkglineflag        returnpkglineflag    registered = _returnerload(cmds)pkglineflag    registered.append(blueprint)pkglineflag    f = open('app/dht/dhtconfig.json','w')pkglineflag    ujson.dump(registered,f)pkglineflag    f.close()pkglineflag    LOG.debug(f'The new DHT pin named {blueprint[\"--name\"]} successfully saved:\\n{blueprint}')pkglineflag    pkglineflagdef _returnerload(cmds):pkglineflag    payload = \"\"pkglineflag    try:pkglineflag        with open(\"app/dht/dhtconfig.json\", \"r\") as fp:pkglineflag            payload = fp.read()pkglineflag            fp.close()pkglineflag    except OSError:pkglineflag        with open(\"app/dht/dhtconfig.json\",\"w\") as fp:pkglineflag            fp.write('[]')pkglineflag            fp.closepkglineflag    if payload=='':pkglineflag        payload='[]'pkglineflag    payload = ujson.loads(payload)pkglineflag    return payloadpkglineflagpkglineflagdef show(cmds):pkglineflag    payload = \"\"pkglineflag    try:pkglineflag        with open(\"/app/dht/dhtconfig.json\", \"r\") as fp:pkglineflag            payload = fp.read()pkglineflag            fp.close()pkglineflag        payload = ujson.loads(payload)pkglineflag        for i in payload:pkglineflag            LOG.info(i)pkglineflag    except OSError:pkglineflag        LOG.error(\"There is no registered DHT sensor!\")pkglineflag        pkglineflagdef delete(cmds):pkglineflag    name = cmds[2]pkglineflag    payload = _returnerload(cmds)pkglineflag    founded = Falsepkglineflag    with open(\"app/dht/dhtconfig.json\",'w') as fp:  pkglineflag        for pin in payload:pkglineflag            if pin[\"--name\"] == name:pkglineflag                payload.remove(pin)pkglineflag                founded = Truepkglineflag        ujson.dump(payload,fp)pkglineflag        fp.close()pkglineflag    if founded:pkglineflag        LOG.debug(f'The DHT sensor named \"{name}\" is deleted')pkglineflag    else:pkglineflag        DHTErrors.undefined_pin_name(name)pkglineflag        pkglineflagdef update(cmds):pkglineflag    name = cmds[2]pkglineflag    payload = _returnerload(cmds)pkglineflag    blueprint={}pkglineflag    founded = Falsepkglineflag    for pin in payload:pkglineflag        if pin[\"--name\"] == name:pkglineflag            blueprint = pinpkglineflag            delete(cmds)pkglineflag            founded = Truepkglineflag            breakpkglineflag    if blueprint == {}:pkglineflag        returnpkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    payload = _returnerload(cmds)pkglineflag    payload.append(blueprint)pkglineflag    with open(\"app/dht/dhtconfig.json\", \"w\") as fp:pkglineflag        ujson.dump(payload,fp)pkglineflag        fp.close()pkglineflag    if founded:pkglineflag        LOG.debug(f'Parameters of \"{name}\" are updated')pkglineflag    else:pkglineflag        DHTErrors.undefined_pin_name()pkglineflag        pkglineflagdef measure(cmds):pkglineflag    try:pkglineflag        payload = _returnerload(cmds)pkglineflag        runner_pin = {}pkglineflag        for pin in payload:pkglineflag            if pin[\"--name\"] == cmds[2]:pkglineflag                runner_pin = pinpkglineflag        d = eval('dht.DHT{}(Pin(int({})))'.format(runner_pin[\"--type\"],runner_pin[\"--pin\"]))pkglineflag        utime.sleep(0.1)pkglineflag        d.measure()pkglineflag        utime.sleep(0.1)pkglineflag        print(\"Temp: \" +str(d.temperature()))pkglineflag        print(\"Hum:\"+ str(d.humidity()))pkglineflag    except KeyError:pkglineflag        DHTErrors.undefined_pin_name(cmds[2])pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        pkglineflagdef listen(cmds):pkglineflag    try:pkglineflag        global exit_listen_flagpkglineflag        if not len(cmds)>2:pkglineflag            DHTErrors.listen_usage()pkglineflag            returnpkglineflag        payload = _returnerload(cmds)pkglineflag        if cmds[2] == \"stop\":pkglineflag            exit_listen_flag = Truepkglineflag            returnpkglineflag        else:pkglineflag            exit_listen_flag = Falsepkglineflag        pins = {}pkglineflag        for pin in payload:pkglineflag            if pin[\"--name\"] == cmds[2]:pkglineflag                pins = pinpkglineflag        pins[\"--name\"] = cmds[2]pkglineflag        if len(cmds) > 3:pkglineflag            if cmds[3] == \"temp\":pkglineflag                if len(cmds) > 4:pkglineflag                    try:pkglineflag                        sleep_time = float(cmds[4])pkglineflag                        _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"temp\"))pkglineflag                    except:pkglineflag                        DHTErrors.float_error(cmds[4])pkglineflag                else:pkglineflag                    sleep_time = 1pkglineflag                    _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"temp\"))pkglineflag            elif cmds[3] == \"hum\":pkglineflag                if len(cmds) > 4:pkglineflag                    try:pkglineflag                        sleep_time = float(cmds[4])pkglineflag                        _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"hum\"))pkglineflag                    except:pkglineflag                        DHTErrors.float_error(cmds[4])pkglineflag                else:pkglineflag                    sleep_time = 1pkglineflag                    _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"hum\"))pkglineflag            elif cmds[3] == \"both\":pkglineflag                if len(cmds) > 4:pkglineflag                    try:pkglineflag                        sleep_time = float(cmds[4])pkglineflag                        _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"both\"))pkglineflag                    except:pkglineflag                        DHTErrors.float_error(cmds[4])pkglineflag                else:pkglineflag                    sleep_time = 1pkglineflag                    _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"both\"))pkglineflag            else:pkglineflag                try:pkglineflag                    sleep_time = float(cmds[3])pkglineflag                    _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"both\"))pkglineflag                except:pkglineflag                    DHTErrors.float_error(cmds[3])pkglineflag        else:    pkglineflag            sleep_time = 1pkglineflag            _thread.start_new_thread(_listen_thread,(pins,sleep_time,\"both\"))pkglineflag    except KeyError:pkglineflag        DHTErrors.undefined_pin_name(cmds[2])pkglineflag            pkglineflagdef _listen_thread(pin,sleep_time,measure_type):pkglineflag    global exit_listen_flagpkglineflag    try:pkglineflag        runner_pin = eval('dht.DHT{}(Pin(int({})))'.format(pin[\"--type\"],pin[\"--pin\"]))pkglineflag        while not exit_listen_flag:pkglineflag            runner_pin.measure()pkglineflag            if measure_type == \"temp\": pkglineflag                print(f'\\nTemprature of DHT pin: '+ str(runner_pin.temperature()))pkglineflag            elif measure_type == \"hum\":pkglineflag                print(f'\\nHumidity of DHT pin: '+ str(runner_pin.humidity()))pkglineflag            else:pkglineflag                print(f'\\nTemprature of DHT pin: '+ str(runner_pin.temperature()))pkglineflag                print(f'Humidity of DHT pin: '+ str(runner_pin.humidity()))pkglineflag            utime.sleep(sleep_time)pkglineflag    except KeyError:pkglineflag        DHTErrors.undefined_pin_name(pin[\"--name\"])pkglineflag    except Exception as ex:pkglineflag        raise expkglineflag        LOG.error(ex)"
        }
    ]
}
