{
    "name": "segment7_display",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pinpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagimport utimepkglineflagpkglineflagconfig_path = '//app/segment7_display/segment7_displayconfig.json'pkglineflagcodes = [[0,0,0,0,0,0,1],pkglineflag         [1,0,0,1,1,1,1],pkglineflag         [0,0,1,0,0,1,0],pkglineflag         [0,0,0,0,1,1,0],pkglineflag         [1,0,0,1,1,0,0],pkglineflag         [0,1,0,0,1,0,0],pkglineflag         [0,1,0,0,0,0,0],pkglineflag         [0,0,0,1,1,1,1],pkglineflag         [0,0,0,0,0,0,0],pkglineflag         [0,0,0,0,1,0,0]]pkglineflagpkglineflagpkglineflagclass Segment7_DisplayUsage():pkglineflagpkglineflag    @staticmethodpkglineflag    def error_undefined_pin(pin_name):pkglineflag        return LOG.error(f'There is no 7 segment display pin named \"{pin_name}\" !')pkglineflag    pkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        message = LOG.info(' -> segment7_display var --name [PIN_NAME] --pins a,b,c,d,e,f,g,dt --type [7_SEGMENT_DISPLAY_TYPE]')+\"\\n\"pkglineflag        message += LOG.info('[7_SEGMENT_DISPLAY_TYPE] can be anode or cathode')+\"\\n\"pkglineflag        message += LOG.info('a,b,c,d,e,f,g,dt pins must be entered in order')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        return LOG.info(' -> segment7_display delete [PIN_NAME]')+\"\\n\"+LOG.info('deletes registered 7 segment display pin named [PIN_NAME]')+\"\\n\"+LOG.info('To delete all registered 7 segment display pins -> segment7_display delete all')pkglineflagpkglineflag    @staticmethodpkglineflag    def update_usage():pkglineflag        return LOG.info(' -> segment7_display update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')+\"\\n\"+LOG.info('Updates the [VALUE_TO_CHANGE] value of the 7 segment display pin named [PIN_NAME] to [NEW_VALUE]')pkglineflagpkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        return LOG.info(' -> segment7_display show')+\"\\n\"+LOG.info('shows all registered 7 segment display pins')+\"\\n\"+LOG.info(' -> segment7_display show [PARAMETER]:[VALUE_TO_SEARCH_FOR]')+\"\\n\"+LOG.info('shows specific 7 segment display pins')pkglineflag    pkglineflag    @staticmethodpkglineflag    def write_usage():pkglineflag        return LOG.info(' -> segment7_display write [PIN_NAME] --number [NUMBER] -dot')+\"\\n\"+LOG.info('[NUMBER] can be 0,1,2,3,4,5,6,7,8 or 9')+\"\\n\"+LOG.info('If the \"-dot\" parameter is written, the dot pin value will be HIGH.')pkglineflag    pkglineflag    @staticmethodpkglineflag    def count_usage():pkglineflag        message = LOG.info(' -> segment7_display count [PIN_NAME] --range [START],[STOP],[STEP] --delay [SLEEP_TIME]')+\"\\n\"pkglineflag        message += LOG.info('Prints from entered [START] to [STOP] by increasing or decreasing as much as [STEP] to 7 segment display')+\"\\n\"pkglineflag        message += LOG.info('Delays transitions with --delay parameter.If not entered, default delay is 1 second')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def off_usage():pkglineflag        return LOG.info(' -> segment7_display off [PIN_NAME]')+\"\\n\"+LOG.info('Turns off the 7 segment display named [PIN_NAME]')pkglineflag        pkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','count','off']pkglineflag    if not len(cmds) > 2:pkglineflag        message = 'Commands: \\n'pkglineflag        for command in command_list:pkglineflag            message += command + \"\\n\"pkglineflag        message += LOG.info('For more information about commands -> segment7_display help [COMMAND]')pkglineflag        return messagepkglineflag    try:pkglineflag        return eval(f'Segment7_DisplayUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        return LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflag        pkglineflagdef run(cmds):pkglineflag    if not len(cmds) > 1:pkglineflag        return LOG.error(\"Please enter a command!\")+\"\\n\"+LOG.info(\"You can use 'segment7_display help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return 'ERROR'pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running 7 segment display command\")+\"\\n\"+LOG.error(f'Is the \"{cmds[1]}\" a 7 segment display command?')+\"\\n\"+LOG.info(\"You can use 'segment7_display help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"{}\".format(ex))pkglineflag        pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"segment7_display\", \"--name\":\"\", \"--pins\":\"\", \"--type\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            return LOG.error('Error while registering 7 segment display pin!')+\"\\n\"+LOG.error('Missing Argument(s)!')pkglineflag    if not(temp[\"--type\"] == \"anode\" or temp[\"--type\"] == \"cathode\"):pkglineflag        del temppkglineflag        return LOG.error(\"7 segment display type can be anode or cathode\")pkglineflag    elif not len(temp[\"--pins\"]) > 12:pkglineflag        return LOG.error('Missing pin !')pkglineflag    PinCommands(cmds, path=config_path, pin_type=\"segment7_display\").register(blueprint)   pkglineflag    return LOG.debug('The new 7 segment display pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    pkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"segment7_display\").show()pkglineflag pkglineflagpkglineflagdef delete(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"segment7_display\", pin_name=cmds[2]).delete()pkglineflag            pkglineflag        pkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"segment7_display\",pin_name=cmds[2]).update()    pkglineflagpkglineflagdef write(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").get_pin(cmds[0],cmds[2])pkglineflag        pins = pin[\"--pins\"].split(\",\")pkglineflag        pin1 = Pin(int(pins[0]),Pin.OUT)pkglineflag        pin2 = Pin(int(pins[1]),Pin.OUT)pkglineflag        pin3 = Pin(int(pins[2]),Pin.OUT)pkglineflag        pin4 = Pin(int(pins[3]),Pin.OUT)pkglineflag        pin5 = Pin(int(pins[4]),Pin.OUT)pkglineflag        pin6 = Pin(int(pins[5]),Pin.OUT)pkglineflag        pin7 = Pin(int(pins[6]),Pin.OUT)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"{}\".format(ex))pkglineflag        pkglineflag    if pin[\"--type\"] == \"cathode\":pkglineflag        pin1.value(1-codes[int(blueprint[\"--number\"])][0])pkglineflag        pin2.value(1-codes[int(blueprint[\"--number\"])][1])pkglineflag        pin3.value(1-codes[int(blueprint[\"--number\"])][2])pkglineflag        pin4.value(1-codes[int(blueprint[\"--number\"])][3])pkglineflag        pin5.value(1-codes[int(blueprint[\"--number\"])][4])pkglineflag        pin6.value(1-codes[int(blueprint[\"--number\"])][5])pkglineflag        pin7.value(1-codes[int(blueprint[\"--number\"])][6])pkglineflag    elif pin[\"--type\"] == \"anode\":    pkglineflag        pin1.value(codes[int(blueprint[\"--number\"])][0])pkglineflag        pin2.value(codes[int(blueprint[\"--number\"])][1])pkglineflag        pin3.value(codes[int(blueprint[\"--number\"])][2])pkglineflag        pin4.value(codes[int(blueprint[\"--number\"])][3])pkglineflag        pin5.value(codes[int(blueprint[\"--number\"])][4])pkglineflag        pin6.value(codes[int(blueprint[\"--number\"])][5])pkglineflag        pin7.value(codes[int(blueprint[\"--number\"])][6])pkglineflag    del pin1,pin2,pin3,pin4,pin5,pin6,pin7pkglineflag    try:pkglineflag        if pin[\"--type\"] == \"anode\":pkglineflag            x = 0pkglineflag        elif pin[\"--type\"] == \"cathode\":pkglineflag            x = 1pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"{}\".format(ex))pkglineflag    if '-dot' in blueprint.keys():pkglineflag        pindt = Pin(int(pins[7]),Pin.OUT)pkglineflag        pindt.value(int(x))pkglineflag    else:pkglineflag        pindt = Pin(int(pins[7]),Pin.OUT)pkglineflag        pindt.value(1-int(x))pkglineflag    del pindtpkglineflag    return 'OK!'pkglineflag             pkglineflagdef off(cmds):pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").get_pin(cmds[0],cmds[2])pkglineflag        pins = pin[\"--pins\"].split(\",\")pkglineflag        pin1 = Pin(int(pins[0]),Pin.OUT)pkglineflag        pin2 = Pin(int(pins[1]),Pin.OUT)pkglineflag        pin3 = Pin(int(pins[2]),Pin.OUT)pkglineflag        pin4 = Pin(int(pins[3]),Pin.OUT)pkglineflag        pin5 = Pin(int(pins[4]),Pin.OUT)pkglineflag        pin6 = Pin(int(pins[5]),Pin.OUT)pkglineflag        pin7 = Pin(int(pins[6]),Pin.OUT)pkglineflag        pin8 = Pin(int(pins[7]),Pin.OUT)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"{}\".format(ex))pkglineflag    pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 0pkglineflag        y = 1pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 1pkglineflag        y = 0pkglineflag    pin1.value(int(y))pkglineflag    pin2.value(int(y))pkglineflag    pin3.value(int(y))pkglineflag    pin4.value(int(y))pkglineflag    pin5.value(int(y))pkglineflag    pin6.value(int(y))pkglineflag    pin7.value(int(y))pkglineflag    pin8.value(int(y))pkglineflag    del pin1,pin2,pin3,pin4,pin5,pin6,pin7,pin8pkglineflag    return 'OK!'pkglineflag    pkglineflagdef count(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").get_pin(cmds[0],cmds[2])pkglineflag    blueprint = {\"--range\":\"\",\"--delay\":\"1\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    try:pkglineflag        cmds2 = ['segment7_display','write',\"--number\"]pkglineflag        if pin == False:pkglineflag            return LOG.error(\"The pin named {} does not exist!\".format(cmds[2]))pkglineflag        else:pkglineflag            cmds2.insert(2,cmds[2])pkglineflag            start = blueprint[\"--range\"].split(\",\")[0]pkglineflag            finish = blueprint[\"--range\"].split(\",\")[1]pkglineflag            step = blueprint[\"--range\"].split(\",\")[2]pkglineflag            for i in range(int(start),int(finish),int(step)):pkglineflag                cmds2.append(str(i))pkglineflag                write(cmds2)pkglineflag                cmds2.remove(str(i))pkglineflag                utime.sleep(float(blueprint[\"--delay\"]))pkglineflag            cmds2.pop(2)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"{}\".format(ex))pkglineflag    return [i for i in range(int(start),int(finish),int(step))]pkglineflag    pkglineflag"
        },
        {
            "filename": "segment7_displayconfig.json",
            "code": "[]"
        }
    ]
}