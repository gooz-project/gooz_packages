{
    "name": "segment7_display",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pinpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagimport utimepkglineflagpkglineflagconfig_path = '//app/segment7_display/segment7_displayconfig.json'pkglineflagcodes = [[0,0,0,0,0,0,1],pkglineflag         [1,0,0,1,1,1,1],pkglineflag         [0,0,1,0,0,1,0],pkglineflag         [0,0,0,0,1,1,0],pkglineflag         [1,0,0,1,1,0,0],pkglineflag         [0,1,0,0,1,0,0],pkglineflag         [0,1,0,0,0,0,0],pkglineflag         [0,0,0,1,1,1,1],pkglineflag         [0,0,0,0,0,0,0],pkglineflag         [0,0,0,0,1,0,0]]pkglineflagpkglineflagpkglineflagclass Segment7_DisplayUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no 7 segment display pin named \"{pin_name}\" !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display var --name [PIN_NAME] --pins a,b,c,d,e,f,g,dt --type [7_SEGMENT_DISPLAY_TYPE]')pkglineflag        LOG.info('[7_SEGMENT_DISPLAY_TYPE] can be anode or cathode')pkglineflag        LOG.info('a,b,c,d,e,f,g,dt pins must be entered in order')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display delete [PIN_NAME]')pkglineflag        LOG.info('segment7_display delete command deletes registered 7 segment display pins by [PIN_NAME]')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display show')pkglineflag        LOG.info('segment7_display show command simply prints registered 7 segment display pins')pkglineflag    def update_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display update [PIN_NAME]')pkglineflag        LOG.info('segment7_display update command updates registered 7 segment display named [PIN_NAME]')pkglineflag    def write_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display write [PIN_NAME] --number [NUMBER] --dot [STATUS]')pkglineflag        LOG.info('[NUMBER] can be 0,1,2,3,4,5,6,7,8 or 9')pkglineflag        LOG.info('[STATUS] can be on or off')pkglineflag    def count_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display count [PIN_NAME] --range [START],[STOP],[STEP] --delay [SLEEP_TIME]')pkglineflag        LOG.info('Prints from entered [START] to [STOP] by increasing or decreasing as much as [STEP] to 7 segment display')pkglineflag        LOG.info('Delays transitions with --delay parameter.If not entered, default delay is 1 second')pkglineflag    def off_usage():pkglineflag        LOG.info('\\nUsage:\\n->segment7_display off [PIN_NAME]')pkglineflag        LOG.info('Turns off the 7 segment display named [PIN_NAME]')pkglineflag        pkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','count','off']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> segment7_display help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'Segment7_DisplayUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflag        pkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'segment7_display help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running segment7_display command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a segment7_display command?')pkglineflag        LOG.info(\"You can use 'segment7_display help' for available commands!\")pkglineflag        pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"segment7_display\", \"--name\":\"\", \"--pins\":\"\", \"--type\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering 7 segment display pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    elif not(temp[\"--type\"] == \"anode\" or temp[\"--type\"] == \"cathode\"):pkglineflag        LOG.error(\"7 segment display type can be anode or cathode\")pkglineflag        del temppkglineflag        returnpkglineflag    elif not len(temp[\"--pins\"]) > 12:pkglineflag        LOG.error('Missing pin !')pkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path, pin_type=\"segment7_display\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new 7 segment display pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflag    pkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").show()pkglineflag        pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The 7 segment display pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            segment7_DisplayUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        Segment7_DisplayUsage.delete_usage()pkglineflag            pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"segment7_display\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The 7 segment display pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflag    pkglineflagpkglineflagdef write(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").get_pin(cmds[0],cmds[2])pkglineflag        pins = pin[\"--pins\"].split(\",\")pkglineflag        pin1 = Pin(int(pins[0]),Pin.OUT)pkglineflag        pin2 = Pin(int(pins[1]),Pin.OUT)pkglineflag        pin3 = Pin(int(pins[2]),Pin.OUT)pkglineflag        pin4 = Pin(int(pins[3]),Pin.OUT)pkglineflag        pin5 = Pin(int(pins[4]),Pin.OUT)pkglineflag        pin6 = Pin(int(pins[5]),Pin.OUT)pkglineflag        pin7 = Pin(int(pins[6]),Pin.OUT)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        returnpkglineflag        pkglineflag    if pin[\"--type\"] == \"cathode\":pkglineflag        pin1.value(1-codes[int(blueprint[\"--number\"])][0])pkglineflag        pin2.value(1-codes[int(blueprint[\"--number\"])][1])pkglineflag        pin3.value(1-codes[int(blueprint[\"--number\"])][2])pkglineflag        pin4.value(1-codes[int(blueprint[\"--number\"])][3])pkglineflag        pin5.value(1-codes[int(blueprint[\"--number\"])][4])pkglineflag        pin6.value(1-codes[int(blueprint[\"--number\"])][5])pkglineflag        pin7.value(1-codes[int(blueprint[\"--number\"])][6])pkglineflag    elif pin[\"--type\"] == \"anode\":    pkglineflag        pin1.value(codes[int(blueprint[\"--number\"])][0])pkglineflag        pin2.value(codes[int(blueprint[\"--number\"])][1])pkglineflag        pin3.value(codes[int(blueprint[\"--number\"])][2])pkglineflag        pin4.value(codes[int(blueprint[\"--number\"])][3])pkglineflag        pin5.value(codes[int(blueprint[\"--number\"])][4])pkglineflag        pin6.value(codes[int(blueprint[\"--number\"])][5])pkglineflag        pin7.value(codes[int(blueprint[\"--number\"])][6])pkglineflag    del pin1,pin2,pin3,pin4,pin5,pin6,pin7pkglineflag    try:pkglineflag        if pin[\"--type\"] == \"anode\":pkglineflag            x = 0pkglineflag        elif pin[\"--type\"] == \"cathode\":pkglineflag            x = 1pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        returnpkglineflag    if blueprint[\"--dot\"] == \"on\":pkglineflag        pindt = Pin(int(pins[7]),Pin.OUT)pkglineflag        pindt.value(int(x))pkglineflag    elif blueprint[\"--dot\"] == \"off\":pkglineflag        pindt = Pin(int(pins[7]),Pin.OUT)pkglineflag        pindt.value(1-int(x))pkglineflag    del pindtpkglineflag             pkglineflagdef off(cmds):pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"segment7_display\").get_pin(cmds[0],cmds[2])pkglineflag        pins = pin[\"--pins\"].split(\",\")pkglineflag        pin1 = Pin(int(pins[0]),Pin.OUT)pkglineflag        pin2 = Pin(int(pins[1]),Pin.OUT)pkglineflag        pin3 = Pin(int(pins[2]),Pin.OUT)pkglineflag        pin4 = Pin(int(pins[3]),Pin.OUT)pkglineflag        pin5 = Pin(int(pins[4]),Pin.OUT)pkglineflag        pin6 = Pin(int(pins[5]),Pin.OUT)pkglineflag        pin7 = Pin(int(pins[6]),Pin.OUT)pkglineflag        pin8 = Pin(int(pins[7]),Pin.OUT)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        returnpkglineflag    pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 0pkglineflag        y = 1pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 1pkglineflag        y = 0pkglineflag    pin1.value(int(y))pkglineflag    pin2.value(int(y))pkglineflag    pin3.value(int(y))pkglineflag    pin4.value(int(y))pkglineflag    pin5.value(int(y))pkglineflag    pin6.value(int(y))pkglineflag    pin7.value(int(y))pkglineflag    pin8.value(int(y))pkglineflag    del pin1,pin2,pin3,pin4,pin5,pin6,pin7,pin8pkglineflag    pkglineflagdef count(cmds):pkglineflag    blueprint = {\"--range\":\"\",\"--delay\":\"1\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    try:pkglineflag        cmds2 = ['segment7_display','write','--dot','off',\"--number\"]pkglineflag        cmds2.insert(2,cmds[2])pkglineflag        start = blueprint[\"--range\"].split(\",\")[0]pkglineflag        finish = blueprint[\"--range\"].split(\",\")[1]pkglineflag        step = blueprint[\"--range\"].split(\",\")[2]pkglineflag        for i in range(int(start),int(finish),int(step)):pkglineflag            cmds2.append(str(i))pkglineflag            write(cmds2)pkglineflag            cmds2.remove(str(i))pkglineflag            utime.sleep(float(blueprint[\"--delay\"]))pkglineflag        cmds2.pop(2)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag    pkglineflag"
        },
        {
            "filename": "segment7_displayconfig.json",
            "code": "[]"
        }
    ]
}