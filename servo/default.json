{
    "name": "servo",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pin,PWMpkglineflagimport utimepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagpkglineflagconfig_path=\"//app/servo/servoconfig.json\"pkglineflagpkglineflagpkglineflagclass Servo_MotorUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no Servo pin named [PIN NAME] !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->servo var --name [PIN NAME] -pin [PWM_PIN] ')pkglineflag    def degree_usage():pkglineflag        LOG.info('\\nUsage:\\n->servo write [PIN NAME] [DEGREE]')pkglineflag        LOG.info('[DEGREE] have to be between 0 and 180')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\n->servo delete [PIN NAME]')pkglineflag        LOG.info('servo delete command deletes registered Servo pins by pin_name')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\n->servo show')pkglineflag        LOG.info('servo show command simply prints registered Servo pins')pkglineflag    def update_usage():pkglineflag        LOG.info('\\nUsage:\\n->servo update [PIN NAME] --[PARAMETER_NAME] [NEW_PARAMETER]')pkglineflag        LOG.info('updates registered Servo named [PIN NAME]')pkglineflagpkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','degree']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> servo help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'Servo_MotorUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagpkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"servo\",\"--name\":\"\",\"--pin\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering Servo pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    pkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"servo\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new Servo pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagpkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"servo\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The Servo pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            Servo_MotorUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        Servo.delete_usage()pkglineflagpkglineflagpkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"servo\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The Servo pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"servo\").show()pkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'servo help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running Servo command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a Servo command?')pkglineflag        LOG.info(\"You can use 'servo help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running Servo command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'servo help' for available commands!\")pkglineflag    pkglineflag    pkglineflagdef degree(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"servo\").get_pin(cmds[0],cmds[2])pkglineflag    pkglineflag    if cmds[2] == pin[\"--name\"] and pin[\"pinType\"] == \"servo\":pkglineflag        try:pkglineflag            servo_pin = PWM(Pin(int(pin[\"--pin\"])), freq = 50)pkglineflag        except Exception as ex:pkglineflag            raise expkglineflag            LOG.error(ex)pkglineflag        try:pkglineflag            servo_pin.duty(int((int(cmds[3])*5/9)+20))pkglineflag        except Exception as ex:pkglineflag            raise expkglineflag            LOG.error(ex)pkglineflag        del servo_pinpkglineflag "
        },
        {
            "filename": "servoconfig.json",
            "code": "[]"
        }
    ]
}
