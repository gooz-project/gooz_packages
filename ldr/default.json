{
    "name": "ldr",
    "codes": [
        {
            "filename": "ldrconfig.json",
            "code": "[]"
        },
        {
            "filename": "main.py",
            "code": "from machine import Pin,ADC,RTCpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport _threadpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagimport utimepkglineflagpkglineflagconfig_path=\"//app/ldr/ldrconfig.json\"pkglineflagpkglineflagclass LDRUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no LDR pin named \"{pin_name}\" !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->ldr var --name [PIN_NAME] --pin [ADC_PIN]')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\n->ldr delete [PIN_NAME]')pkglineflag        LOG.info('ldr delete command deletes registered LDR pins by [PIN_NAME]')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\n->ldr show')pkglineflag        LOG.info('ldr show command simply prints registered LDR pins')pkglineflag    def update_usage():pkglineflag        LOG.info('\\nUsage:\\n->ldr update [PIN_NAME]')pkglineflag        LOG.info('ldr update command updates registered LDR named [PIN_NAME]')pkglineflag    def read_usage():pkglineflag        LOG.info('\\nUsage:\\n->ldr read [PIN_NAME]\\n->ldr read [PIN_NAME] --max [MAX_NUMBER] --min [MIN_NUMBER]')pkglineflag        LOG.info('Prints the value of light intensity measured by LDR and default value range is min:0 to max:4095)')pkglineflag        LOG.info('--max and --min parameters set the value range according to the entered [MAX_NUMBER] and [MIN_NUMBER]')pkglineflag    def listen_usage():pkglineflag        LOG.info('\\nUsage -> dht listen [PIN_NAME] --delay [SLEEP_TIME] --file [FILE_NAME] --max [MAX_NUMBER] --min [MIN_NUMBER] --loop [MEASURING_LOOP]')pkglineflag        LOG.info('[SLEEP_TIME] is not necessary! Default value: 1 second')pkglineflag        LOG.info('[FILE_NAME] is not necessary! If empty it will not be saved')pkglineflag        LOG.info('[MAX_NUMBER] and [MIN_NUMBER] is not necessary! If not entered default value range is min:0 to max:4095')pkglineflag        LOG.info('[MEASURING_LOOP] is not necessary! If not entered, loop lasts until \"ldr listen stop\" command')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','read','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> ldr help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'LDRUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'ldr help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running LDR command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a LDR command?')pkglineflag        LOG.info(\"You can use 'ldr help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running LDR command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'ldr help' for avaible commands!\")pkglineflag    pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"ldr\",\"--name\":\"\",\"--pin\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering ldr pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"ldr\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new LDR pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"ldr\").show()pkglineflag        pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"ldr\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The ldr pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            LDRUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        LDRUsage.delete_usage()pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"ldr\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The ldr pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflag    pkglineflagdef read(cmds):pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"ldr\").get_pin(cmds[0],cmds[2])pkglineflag        adc = ADC(Pin(int(pin[\"--pin\"])))pkglineflag        adc.atten(ADC.ATTN_11DB)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        returnpkglineflag    blueprint = {\"--min\":\"0\", \"--max\":\"4095\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    utime.sleep(0.2)pkglineflag    value = ((int(blueprint[\"--max\"]) - int(blueprint[\"--min\"]))*adc.read())/4095pkglineflag    utime.sleep(0.2)pkglineflag    print(\"Intensity of light: \" +str(value))pkglineflag    pkglineflagdef listen(cmds):pkglineflag    global exit_listen_flagpkglineflag    if cmds[2] == \"stop\":pkglineflag        exit_listen_flag = Truepkglineflag        returnpkglineflag    else:pkglineflag        exit_listen_flag = Falsepkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--loop\":\"-1\",\"--min\":\"0\",\"--max\":\"4095\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    del blueprintpkglineflag    pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"ldr\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _thread.start_new_thread(_listen_thread,(pin,listen_conf))pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise expkglineflag    del listen_confpkglineflag            pkglineflagdef _listen_thread(pins,conf={}):pkglineflag    global exit_listen_flagpkglineflag    loop = int(conf[\"--loop\"])pkglineflag    try:pkglineflag        adc = ADC(Pin(int(pins[\"--pin\"])))pkglineflag        adc.atten(ADC.ATTN_11DB)pkglineflag        while not exit_listen_flag:pkglineflag            if loop == 0:pkglineflag                exit_listen_flag = Truepkglineflag                breakpkglineflag            elif loop >0:pkglineflag                loop -= 1pkglineflag            elif loop<0:pkglineflag                passpkglineflagpkglineflag            value = ((int(conf[\"--max\"]) - int(conf[\"--min\"]))*adc.read())/4095pkglineflag            print(\"Intensity of light: {}\".format(value))pkglineflag            if conf[\"--file\"] != \"\":pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"Pin:{}, Pin Name:{}, Intensity of Light:{}   {}\\n\".format(pins[\"--pin\"],pins[\"--name\"],value,RTC().datetime()))pkglineflag                f.close()pkglineflag            utime.sleep(float(conf[\"--delay\"]))pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise expkglineflag    pkglineflag    "
        }
    ]
}