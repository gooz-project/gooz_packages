{
    "name": "ldr",
    "codes": [
        {
            "filename": "ldrconfig.json",
            "code": "[]"
        },
        {
            "filename": "main.py",
            "code": "from machine import Pin,ADC,RTCpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagfrom utime import sleeppkglineflagpkglineflagconfig_path=\"//app/ldr/ldrconfig.json\"pkglineflagpkglineflagclass LDRUsage():pkglineflag    pkglineflag    @staticmethodpkglineflag    def error_undefined_pin(pin_name):pkglineflag        return LOG.error(f'There is no LDR pin named \"{pin_name}\" !')pkglineflag    pkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        return LOG.info('\\nUsage:\\n->ldr var --name [PIN_NAME] --pin [ADC_PIN]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        return LOG.info('Usage -> ldr delete [PIN_NAME]')+\"\\n\"+LOG.info('deletes registered ldr pin named [PIN_NAME]')+\"\\n\"+LOG.info('To delete all registered ldr pins -> ldr delete all')pkglineflag    pkglineflag    @staticmethodpkglineflag    def update_usage():pkglineflag        return LOG.info('Usage -> ldr update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')+\"\\n\"+LOG.info('updates the [VALUE_TO_CHANGE] value of the ldr pin named [PIN_NAME] to [NEW_VALUE]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        return LOG.info('Usage -> ldr show')+\"\\n\"+LOG.info('shows all registered ldr pins')+\"\\n\"+LOG.info('Usage -> ldr show [PARAMETER]:[VALUE_TO_SEARCH_FOR]')+\"\\n\"+LOG.info('shows specific ldr pins')pkglineflag    pkglineflag    @staticmethodpkglineflag    def read_usage():pkglineflag        return LOG.info('\\nUsage:\\n->ldr read [PIN_NAME]\\n->ldr read [PIN_NAME] --max [MAX_NUMBER] --min [MIN_NUMBER]')+\"\\n\"+LOG.info('Prints the value of light intensity measured by LDR and default value range is min:0 to max:4095')+\"\\n\"+LOG.info('--max and --min parameters set the value range according to the entered [MAX_NUMBER] and [MIN_NUMBER]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def listen_usage():pkglineflag        message = LOG.info('\\nUsage -> ldr listen [PIN_NAME] --delay [SLEEP_TIME] --file [FILE_NAME] --max [MAX_NUMBER] --min [MIN_NUMBER] --loop [MEASURING_LOOP]')+\"\\n\"pkglineflag        message += LOG.info('[SLEEP_TIME] is not necessary! Default value: 1 second')+\"\\n\"pkglineflag        message += LOG.info('[FILE_NAME] is not necessary! If empty it will not be saved')+\"\\n\"pkglineflag        message += LOG.info('[MAX_NUMBER] and [MIN_NUMBER] is not necessary! If not entered default value range is min:0 to max:4095')+\"\\n\"pkglineflag        message += LOG.info('[MEASURING_LOOP] is not necessary! If not entered, loop lasts until \"thread stop [THREAD_ID]\" command')+\"\\n\"pkglineflag        message += LOG.info('[THREAD_ID] is seen with \"thread show\" command')pkglineflag        return messagepkglineflag        pkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','read','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        message = 'Commands: \\n'pkglineflag        for command in command_list:pkglineflag            message += command + \"\\n\"pkglineflag        message += LOG.info('For more information about commands -> ldr help [COMMAND]')pkglineflag        return messagepkglineflag    try:pkglineflag        return eval(f'LDRUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        return LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+\"\\n\"+LOG.info(\"You can use 'ldr help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return \"OK\"pkglineflag    try:pkglineflag        return eval(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running LDR command\")+\"\\n\"+LOG.error(f'Is the \"{cmds[1]}\" a LDR command?')+\"\\n\"+LOG.info(\"You can use 'ldr help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running LDR command!\")+\"\\n\"+LOG.error(str(ex))+\"\\n\"+LOG.error(\"You can use 'ldr help' for avaible commands!\")pkglineflag    pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"ldr\",\"--name\":\"\",\"--pin\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            return LOG.error('Error while registering ldr pin!')+\"\\n\"+LOG.error('Missing Argument(s)!')pkglineflag    PinCommands(cmds, path=config_path,pin_type=\"ldr\").register(blueprint)pkglineflag    return LOG.debug('The new LDR pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"ldr\").show()pkglineflag        pkglineflagdef delete(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"ldr\", pin_name=cmds[2]).delete()pkglineflag        pkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"ldr\",pin_name=cmds[2]).update()pkglineflag    pkglineflagdef read(cmds):pkglineflag    try:pkglineflag        pin = PinCommands(cmds,path=config_path,pin_type=\"ldr\").get_pin(cmds[0],cmds[2])pkglineflag        adc = ADC(Pin(int(pin[\"--pin\"])))pkglineflag        adc.atten(ADC.ATTN_11DB)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    blueprint = {\"--min\":\"0\", \"--max\":\"4095\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    sleep(0.2)pkglineflag    value = ((int(blueprint[\"--max\"]) - int(blueprint[\"--min\"]))*adc.read())/4095pkglineflag    sleep(0.2)pkglineflag    if '-n' in cmds:pkglineflag        return str(value)pkglineflag    else:pkglineflag        return LOG.info(\"Intensity of light: \" +str(value))pkglineflag    pkglineflagdef listen(cmds):pkglineflag    if not len(cmds) > 2:pkglineflag        return LOG.error(\"Please enter pin name!\")pkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--loop\":\"-1\",\"--min\":\"0\",\"--max\":\"4095\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf={'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'ldr_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"ldr\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _gooz_start_function_thread(_ldr_listen_thread,(pin,listen_conf),thread_conf)pkglineflag        del listen_confpkglineflag        return \"The pin is listened\"pkglineflag    except Exception as ex:pkglineflag        del listen_confpkglineflag        return LOG.error(ex)pkglineflag            pkglineflagdef _ldr_listen_thread(pins,conf={}):pkglineflag    try:pkglineflag        adc = ADC(Pin(int(pins[\"--pin\"])))pkglineflag        adc.atten(ADC.ATTN_11DB)pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    value = ((int(conf[\"--max\"]) - int(conf[\"--min\"]))*adc.read())/4095pkglineflag    print(LOG.info(\"Intensity of light: {}\".format(value)))pkglineflag    try:pkglineflag        if conf[\"--file\"] != \"\":pkglineflag            f = open(conf[\"--file\"],\"a\")pkglineflag            f.write(\"Pin:{}, Pin Name:{}, range({},{})Intensity of Light:{}   {}\\n\".format(pins[\"--pin\"],pins[\"--name\"],conf[\"--min\"],conf[\"--max\"],value,RTC().datetime()))pkglineflag            f.close()pkglineflag    except Exception as ex:pkglineflag        return LOG.error(ex)pkglineflag    pkglineflag    "
        }
    ]
}