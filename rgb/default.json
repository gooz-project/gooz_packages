{
    "name": "rgb",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pin,PWMpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagpkglineflagconfig_path=\"//app/rgb/rgbconfig.json\"pkglineflagpkglineflagclass RGBUsage():pkglineflagpkglineflag    @staticmethodpkglineflag    def error_undefined_pin(pin_name):pkglineflag        return LOG.error(f'There is no RGB pin named \"{pin_name}\" !')pkglineflagpkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        return LOG.info(' -> rgb var --name [PIN_NAME] --red [RED_PIN] --green [GREEN_PIN] --blue [BLUE_PIN] --type [RGB_TYPE]')+\"\\n\"+LOG.info('[RGB_TYPE] can be anode or cathode')pkglineflag    pkglineflag    @staticmethodpkglineflag    def write_usage():pkglineflag        return LOG.info(' -> rgb write [PIN_NAME] --color [COLOR]')+\"\\n\"+LOG.info('[COLOR] can be red, blue, green, white, yellow, cyan, purple, orange or pink')pkglineflag    pkglineflag    @staticmethodpkglineflag    def off_usage():pkglineflag        return LOG.info(' -> rgb off [PIN_NAME]')+\"\\n\"+LOG.info('rgb off command turns off RGB led named [PIN_NAME]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        return LOG.info(' -> rgb delete [PIN_NAME]')+\"\\n\"+LOG.info('deletes registered rgb pin named [PIN_NAME]')+\"\\n\"+LOG.info('To delete all registered rgb pins -> rgb delete all')pkglineflag    pkglineflag    @staticmethodpkglineflag    def update_usage():pkglineflag        return LOG.info(' -> rgb update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')+\"\\n\"+LOG.info('updates the [VALUE_TO_CHANGE] value of the rgb pin named [PIN_NAME] to [NEW_VALUE]')pkglineflag    pkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        return LOG.info(' -> rgb show')+\"\\n\"+LOG.info('shows all registered rgb pins')+\"\\n\"+LOG.info(' -> rgb show [PARAMETER]:[VALUE_TO_SEARCH_FOR]')+\"\\n\"+LOG.info('shows specific rgb pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','off']pkglineflag    if not len(cmds) > 2:pkglineflag        message = 'Commands: \\n'pkglineflag        for command in command_list:pkglineflag            message += commandpkglineflag            message += '\\n'pkglineflag        message += LOG.info('For more information about commands -> rgb help [COMMAND]')pkglineflag        return messagepkglineflag    try:pkglineflag        return eval(f'RGBUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        return LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+'\\n'+LOG.info(\"You can use 'rgb help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return \"ERROR\"pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running RGB command\")+'\\n'+LOG.error('Is the \"{}\" a RGB command?'.format(cmds[1]))+'\\n'+LOG.info(\"You can use 'rgb help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running RGB command!\")+'\\n'+LOG.error(ex)+'\\n'+LOG.error(\"You can use 'rgb help' for available commands!\")pkglineflagpkglineflag    pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"rgb\",\"--name\":\"\",\"--red\":\"\",\"--green\":\"\",\"--blue\":\"\",\"--freq\":\"5000\",\"--type\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            return LOG.error('Error while registering rgb pin!')+\"\\n\"+LOG.error('Missing Argument(s)!')pkglineflag    if not(temp[\"--type\"] == \"anode\" or temp[\"--type\"] == \"cathode\"):pkglineflag        del temppkglineflag        return LOG.error(\"RGB type can be anode or cathode\")pkglineflag    PinCommands(cmds, path=config_path,pin_type=\"rgb\").register(blueprint)   pkglineflag    return LOG.debug('The new RGB pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflagpkglineflagdef delete(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"rgb\", pin_name=cmds[2]).delete()pkglineflag        pkglineflag        pkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,config_path,pin_type=\"rgb\", pin_name=cmds[2]).update()pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"rgb\").show()pkglineflag   pkglineflagpkglineflagdef write(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"rgb\").get_pin(cmds[0],cmds[2])pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 1023pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 0pkglineflag                pkglineflag    if blueprint[\"--color\"]==\"red\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"blue\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"green\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"white\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"cyan\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"yellow\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"purple\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(518-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=abs(1010-x))pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"orange\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(1023-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=abs(413-x))pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"pink\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(585-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=abs(393-x))pkglineflag        del pin_r,pin_g,pin_bpkglineflag    else:pkglineflag        return RGBUsage.write_usage()pkglineflag    return 'OK!'pkglineflag            pkglineflagdef off(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"rgb\").get_pin(cmds[0],cmds[2])pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 1023pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 0pkglineflag    pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    del pin_r,pin_g,pin_bpkglineflag    return 'OK!'pkglineflag                "
        },
        {
            "filename": "rgbconfig.json",
            "code": "[]"
        }
    ]
}