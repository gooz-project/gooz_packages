{
    "name": "rgb",
    "codes": [
        {
            "filename": "main.py",
            "code": "from machine import Pin,PWMpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagpkglineflagconfig_path=\"//app/rgb/rgbconfig.json\"pkglineflagpkglineflagclass RGBUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no RGB pin named \"{pin_name}\" !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->rgb var --name [PIN_NAME] --red [RED_PIN] --green [GREEN_PIN] --blue [BLUE_PIN] --type [RGB_TYPE]')pkglineflag        LOG.info('[RGB_TYPE] can be anode or cathode')pkglineflag    def write_usage():pkglineflag        LOG.info('\\nUsage:\\n->rgb write [PIN_NAME] --color [COLOR]')pkglineflag        LOG.info('[COLOR] can be red, blue, green, white, yellow, cyan, purple, orange or pink')pkglineflag    def off_usage():pkglineflag        LOG.info('\\nUsage:\\n->rgb off [PIN_NAME]')pkglineflag        LOG.info('rgb off command turns off RGB led named [PIN_NAME]')pkglineflag    def delete_usage():pkglineflag        LOG.info('Usage -> rgb delete [PIN_NAME]')pkglineflag        LOG.info('deletes registered rgb pin named [PIN_NAME]')pkglineflag        LOG.info('To delete all registered rgb pins -> rgb delete all')pkglineflag    def update_usage():pkglineflag        LOG.info('Usage -> rgb update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')pkglineflag        LOG.info('updates the [VALUE_TO_CHANGE] value of the rgb pin named [PIN_NAME] to [NEW_VALUE]')pkglineflag    def show_usage():pkglineflag        LOG.info('Usage -> rgb show')pkglineflag        LOG.info('shows all registered rgb pins')pkglineflag        LOG.info('Usage -> rgb show [PARAMETER]:[VALUE_TO_SEARCH_FOR]')pkglineflag        LOG.info('shows specific rgb pins')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','off']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> rgb help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'RGBUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'rgb help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running RGB command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a RGB command?')pkglineflag        LOG.info(\"You can use 'rgb help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running RGB command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'rgb help' for avaible commands!\")pkglineflag    pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"rgb\",\"--name\":\"\",\"--red\":\"\",\"--green\":\"\",\"--blue\":\"\",\"--freq\":\"5000\",\"--type\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering rgb pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    elif not(temp[\"--type\"] == \"anode\" or temp[\"--type\"] == \"cathode\"):pkglineflag        LOG.error(\"RGB type can be anode or cathode\")pkglineflag        del temppkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"rgb\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new RGB pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"rgb\").show()pkglineflag        pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"rgb\",pin_name=cmds[2]).delete()pkglineflag        if founded == False and cmds[2] == \"all\":pkglineflag            LOG.debug('All rgb pins successfully deleted.')pkglineflag        elif founded:pkglineflag            LOG.debug('The rgb pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            RGBUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        RGBUsage.delete_usage()pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"rgb\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The rgb pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflag   pkglineflagpkglineflagdef write(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"rgb\").get_pin(cmds[0],cmds[2])pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 1023pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 0pkglineflag                pkglineflag    if blueprint[\"--color\"]==\"red\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"blue\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"green\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"white\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"cyan\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"yellow\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=1023-x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"purple\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(518-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=abs(1010-x))pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"orange\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(1023-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=abs(413-x))pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        del pin_r,pin_g,pin_bpkglineflag    elif blueprint[\"--color\"]==\"pink\":pkglineflag        pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=abs(585-x))pkglineflag        pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag        pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=abs(393-x))pkglineflag        del pin_r,pin_g,pin_bpkglineflag    else:pkglineflag        RGBUsage.write_usage()pkglineflag            pkglineflagdef off(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"rgb\").get_pin(cmds[0],cmds[2])pkglineflag    if pin[\"--type\"] == \"anode\":pkglineflag        x = 1023pkglineflag    elif pin[\"--type\"] == \"cathode\":pkglineflag        x = 0pkglineflag    pin_r = PWM(Pin(int(pin[\"--red\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    pin_g = PWM(Pin(int(pin[\"--green\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    pin_b = PWM(Pin(int(pin[\"--blue\"])),freq=int(pin[\"--freq\"]),duty=x)pkglineflag    del pin_r,pin_g,pin_bpkglineflag                "
        },
        {
            "filename": "rgbconfig.json",
            "code": "[]"
        }
    ]
}