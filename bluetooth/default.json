{
    "name": "bluetooth",
    "codes": [
        {
            "filename": "main.py",
            "code": "import ubluetoothpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagimport _threadpkglineflagfrom utime import sleeppkglineflagpkglineflagble = Nonepkglineflagis_ble_connected = Truepkglineflagble_thread_handler = Falsepkglineflagpkglineflagclass ESP32_BLE():pkglineflag    def __init__(self, name):pkglineflag        self.name = namepkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(True)pkglineflag        self.register()pkglineflag        self.advertiser()pkglineflag        pkglineflag    def ble_irq(self):pkglineflag        buffer = \"\"pkglineflag        buffer = self.ble.gatts_read(self.rx).decode('UTF-8').strip()pkglineflag        print(buffer)pkglineflag        pkglineflag    def close(self):pkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(False)pkglineflag            pkglineflag    def register(self):        pkglineflag        # Nordic UART Service (NUS)pkglineflag        NUS_UUID = '6E400001-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        RX_UUID = '6E400002-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        TX_UUID = '6E400003-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag            pkglineflag        BLE_NUS = ubluetooth.UUID(NUS_UUID)pkglineflag        BLE_RX = (ubluetooth.UUID(RX_UUID), ubluetooth.FLAG_WRITE)pkglineflag        BLE_TX = (ubluetooth.UUID(TX_UUID), ubluetooth.FLAG_NOTIFY)pkglineflag            pkglineflag        BLE_UART = (BLE_NUS, (BLE_TX, BLE_RX,))pkglineflag        SERVICES = (BLE_UART, )pkglineflag        ((self.tx, self.rx,), ) = self.ble.gatts_register_services(SERVICES)pkglineflagpkglineflag    def send(self, data):pkglineflag        self.ble.gatts_notify(0, self.tx, data + '\\n')pkglineflag        pkglineflag    def advertiser(self):pkglineflag        name = bytes(self.name, 'UTF-8')pkglineflag        adv_data = bytearray('\\x02\\x01\\x02') + bytearray((len(name) + 1, 0x09)) + namepkglineflag        self.ble.gap_advertise(100, adv_data)pkglineflag        print(adv_data)pkglineflag        pkglineflagpkglineflagclass BluetoothUsage():pkglineflag    def on_usage():pkglineflag        LOG.info('Usage -> bluetooth on')pkglineflag    def off_usage():pkglineflag        LOG.info('Usage -> bluetooth off')pkglineflag    def send_usage():pkglineflag        LOG.info('Usage -> bluetooth send [DATA]')pkglineflag        LOG.info('sends [DATA] to paired bluetooth device')pkglineflag    def read_usage():pkglineflag        LOG.info('Usage -> bluetooth read')pkglineflag        LOG.info('reads the last taken data from paired bluetooth device')pkglineflag    def listen_usage():pkglineflag        LOG.info('Usage -> bluetooth listen')pkglineflag        LOG.info('reads datas continuously in thread from paired bluetooth device')pkglineflag        LOG.info('Usage -> bluetooth listen stop')pkglineflag        LOG.info('stops to read continuously in thread')pkglineflagpkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['on', 'off', 'send', 'read', 'listen']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> bluetooth help [COMMAND]') pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'BluetoothUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagpkglineflagdef on(cmds):pkglineflag    global blepkglineflag    ble = ESP32_BLE(\"ESP32BLE\")pkglineflag    global is_ble_connectedpkglineflag    is_ble_connected = Truepkglineflag    print(\"Bluetooth is activated.\")pkglineflag    pkglineflag    pkglineflagdef off(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    ble.close()pkglineflag    is_ble_connected = Falsepkglineflag    print(\"Bluetooth is deactivated.\")pkglineflag    pkglineflag    pkglineflagdef send(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        ble.send(cmds[2])pkglineflag    else:pkglineflag        print(\"There is no Bluetooth connection!\")pkglineflagpkglineflagpkglineflagdef read(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        ble.ble_irq()pkglineflag    else:pkglineflag        print(\"There is no Bluetooth connection!\") pkglineflagpkglineflagpkglineflagdef listen(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        global ble_thread_handlerpkglineflag        if len(cmds) > 2 and cmds[2] == \"stop\":        pkglineflag            ble_thread_handler = Truepkglineflag            returnpkglineflag        _thread.start_new_thread(_listen_thread,())pkglineflag    else:pkglineflag        print(\"There is no Bluetooth connection!\") pkglineflagpkglineflagpkglineflagdef _listen_thread():pkglineflag    global ble_thread_handlerpkglineflag    while True:pkglineflag        ble.ble_irq()pkglineflag        if ble_thread_handler == True:pkglineflag            breakpkglineflag        sleep(0.5)pkglineflag    ble_thread_handler = Falsepkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'bluetooth help' for available commands!\")pkglineflag        returnpkglineflag    try:pkglineflag        exec(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running Bluetooth command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a Bluetooth command?')pkglineflag        LOG.info(\"You can use 'bluetooth help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running Bluetooth command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'bluetooth help' for available commands!\")pkglineflag"
        }
    ]
}