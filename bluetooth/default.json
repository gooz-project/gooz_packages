{
    "name": "bluetooth",
    "codes": [
        {
            "filename": "main.py",
            "code": "import ubluetoothpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagimport _threadpkglineflagfrom utime import sleeppkglineflagpkglineflagble = Nonepkglineflagis_ble_connected = Truepkglineflagble_thread_handler = Falsepkglineflagpkglineflagclass ESP32_BLE():pkglineflag    def __init__(self, name):pkglineflag        self.name = namepkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(True)pkglineflag        self.register()pkglineflag        pkglineflag    def ble_irq(self):pkglineflag        buffer = \"\"pkglineflag        buffer = self.ble.gatts_read(self.rx).decode('UTF-8').strip()pkglineflag        return LOG.info(buffer)pkglineflag        pkglineflag    def close(self):pkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(False)pkglineflag            pkglineflag    def register(self):        pkglineflag        # Nordic UART Service (NUS)pkglineflag        NUS_UUID = '6E400001-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        RX_UUID = '6E400002-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        TX_UUID = '6E400003-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag            pkglineflag        BLE_NUS = ubluetooth.UUID(NUS_UUID)pkglineflag        BLE_RX = (ubluetooth.UUID(RX_UUID), ubluetooth.FLAG_WRITE)pkglineflag        BLE_TX = (ubluetooth.UUID(TX_UUID), ubluetooth.FLAG_NOTIFY)pkglineflag            pkglineflag        BLE_UART = (BLE_NUS, (BLE_TX, BLE_RX,))pkglineflag        SERVICES = (BLE_UART, )pkglineflag        ((self.tx, self.rx,), ) = self.ble.gatts_register_services(SERVICES)pkglineflagpkglineflag    def send(self, data):pkglineflag        self.ble.gatts_notify(0, self.tx, data + '\\n')pkglineflag        pkglineflag    def advertiser(self):pkglineflag        name = bytes(self.name, 'UTF-8')pkglineflag        adv_data = bytearray('\\x02\\x01\\x02') + bytearray((len(name) + 1, 0x09)) + namepkglineflag        self.ble.gap_advertise(100, adv_data)pkglineflag        return(LOG.info(adv_data))pkglineflag        pkglineflagpkglineflagclass BluetoothUsage():pkglineflag    def on_usage():pkglineflag        return LOG.info('Usage -> bluetooth on')pkglineflag    def off_usage():pkglineflag        return LOG.info('Usage -> bluetooth off')pkglineflag    def send_usage():pkglineflag        return LOG.info('Usage -> bluetooth send [DATA]') +'\\n'+ LOG.info('sends [DATA] to paired bluetooth device')pkglineflag    def read_usage():pkglineflag        return LOG.info('Usage -> bluetooth read') +'\\n'+ LOG.info('reads the last taken data from paired bluetooth device')pkglineflag    def listen_usage():pkglineflag        message = \"\"pkglineflag        message += LOG.info('Usage -> bluetooth listen') +'\\n'pkglineflag        message += LOG.info('reads datas continuously in thread from paired bluetooth device') +'\\n'pkglineflag        message += LOG.info('Usage -> bluetooth listen stop') +'\\n'pkglineflag        message += LOG.info('stops to read continuously in thread')pkglineflag        return messagepkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+'\\n'+LOG.info(\"You can use 'bluetooth help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return \"ERROR\"pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running Bluetooth command\")+'\\n'+LOG.error(f'Is the \"{cmds[1]}\" a Bluetooth command?')+'\\n'+LOG.info(\"You can use 'bluetooth help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running Bluetooth command!\")+'\\n'+LOG.error(ex)+'\\n'+LOG.error(\"You can use 'bluetooth help' for available commands!\")pkglineflagpkglineflagpkglineflagdef help(cmds):pkglineflag    message = \"\"pkglineflag    command_list = ['on', 'off', 'send', 'read', 'listen']pkglineflag    if not len(cmds) > 2:pkglineflag        for command in command_list:pkglineflag            message += commandpkglineflag            message += '\\n'pkglineflag        return 'Commands:\\n'+message+LOG.info('For more information about commands -> bluetooth help [COMMAND]')pkglineflag    try:pkglineflag        return eval('BluetoothUsage.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        return LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflagpkglineflagpkglineflagdef on(cmds):pkglineflag    global blepkglineflag    ble = ESP32_BLE(\"ESP32BLE\")pkglineflag    global is_ble_connectedpkglineflag    is_ble_connected = Truepkglineflag    return ble.advertiser() +'\\n'+ LOG.info(\"Bluetooth is activated.\")pkglineflag    pkglineflag    pkglineflagdef off(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    ble.close()pkglineflag    is_ble_connected = Falsepkglineflag    return LOG.info(\"Bluetooth is deactivated.\")pkglineflag    pkglineflag    pkglineflagdef send(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        ble.send(cmds[2])pkglineflag        return LOG.info(\"Data sended to paired Bluetooth device.\")pkglineflag    else:pkglineflag        return LOG.warning(\"There is no Bluetooth connection!\")pkglineflagpkglineflagpkglineflagdef read(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        return ble.ble_irq()pkglineflag    else:pkglineflag        return LOG.warning(\"There is no Bluetooth connection!\") pkglineflagpkglineflagpkglineflagdef listen(cmds):pkglineflag    global blepkglineflag    global is_ble_connectedpkglineflag    if is_ble_connected:pkglineflag        global ble_thread_handlerpkglineflag        if len(cmds) > 2 and cmds[2] == \"stop\":        pkglineflag            ble_thread_handler = Truepkglineflag            return \"OK\"pkglineflag        _thread.start_new_thread(_listen_thread,())pkglineflag    else:pkglineflag        return LOG.warning(\"There is no Bluetooth connection!\") pkglineflagpkglineflagpkglineflagdef _listen_thread():pkglineflag    global ble_thread_handlerpkglineflag    while True:pkglineflag        ble.ble_irq()pkglineflag        if ble_thread_handler == True:pkglineflag            breakpkglineflag        sleep(0.5)pkglineflag    ble_thread_handler = Falsepkglineflag"
        }
    ]
}