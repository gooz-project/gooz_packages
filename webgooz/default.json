{
    "name": "webgooz",
    "codes": [
        {
            "filename": "hello.py",
            "code": "from app.webgooz.main import clientpkglineflagpkglineflagdef run():pkglineflag    global clientpkglineflag    response = \"<h1>Hello Main Page</h1>\"pkglineflag    client.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag    client.send(response)pkglineflag"
        },
        {
            "filename": "main.py",
            "code": "from engine.engine_template import EngineTemplatepkglineflagfrom engine.gooz_engine import GoozEnginepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagimport socketpkglineflagimport gcpkglineflagimport _threadpkglineflagbreakFlag = 1pkglineflagclient = Nonepkglineflagaddress = Nonepkglineflagflagger = 0pkglineflagdef run(cmds):pkglineflag    gc.collect()pkglineflag    try:pkglineflag        global flaggerpkglineflag        for i in cmds:pkglineflag            if \"-d\" in i or \"--deattach\" in i:pkglineflag                flagger = 1pkglineflag        if flagger:pkglineflag            destart(cmds)pkglineflag            flagger = 0pkglineflag        else:pkglineflag            exec(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflagpkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        pkglineflagdef start(cmds):pkglineflag    global breakFlagpkglineflag    global clientpkglineflag    global addresspkglineflag    breakFlag = 1pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds)pkglineflag    port = blueprint[\"--port\"]pkglineflag    s = socket.socket()pkglineflag    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)pkglineflag    s.bind(('0.0.0.0', int(port)))pkglineflag    pkglineflag    s.listen(1)pkglineflag    while breakFlag:pkglineflag        cl, addr = s.accept()pkglineflag        print('Got a connection from %s' % str(addr))pkglineflag        client = clpkglineflag        address = addrpkglineflag        pkglineflag        cl_file = cl.makefile('rwb', 0)pkglineflag        line = str(cl_file.recv(1024*8),\"utf-8\").split(\"\\n\")pkglineflag        request_type = line[0].split(\" \")pkglineflag        if request_type[0] == \"GET\":pkglineflag            if request_type[1] == \"/\":pkglineflag                try:pkglineflag                    mainPage()pkglineflag                except Exception as ex:pkglineflag                    LOG.error(ex)pkglineflag            else:pkglineflag                endpoints = request_type[1][1:].split(\"/\")pkglineflag                url_parser = \"\"pkglineflag                for i in endpoints:pkglineflag                    url_parser += \".\"pkglineflag                    url_parser += ipkglineflag                try:pkglineflag                    if \"favicon\" in url_parser:pkglineflag                        passpkglineflag                    else:pkglineflag                        exec(\"import app.webgooz{} as currentendpoint\".format(url_parser))pkglineflag                        exec(\"currentendpoint.run()\")pkglineflag                except Exception as ex:pkglineflag                    LOG.error(ex)pkglineflag        cl.close()pkglineflagpkglineflagpkglineflagdef destart(cmds):pkglineflag    _thread.start_new_thread(start,([cmds]))pkglineflagpkglineflagdef mainPage():pkglineflag    global clientpkglineflag    client.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag    client.send(\"Hello\")pkglineflagpkglineflagpkglineflagdef close(cmds):pkglineflag    global breakFlagpkglineflag    global clientpkglineflag    client.close()pkglineflag    breakFlag = 0"
        },
        {
            "filename": "stop.py",
            "code": "from app.webgooz.main import clientpkglineflagfrom app.webgooz.main import breakFlagpkglineflagpkglineflagdef run():pkglineflag    global breakFlagpkglineflag    global clientpkglineflag    response = \"<h1>Your host stopped</h1>\"pkglineflag    client.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag    client.send(response)pkglineflag    client.close()pkglineflag    breakFlag = 0"
        }
    ]
}