{
    "name": "webgooz",
    "codes": [
        {
            "filename": "main.py",
            "code": "from engine.engine_template import EngineTemplatepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagimport socketpkglineflagimport gcpkglineflagimport _threadpkglineflagpkglineflagdef run(cmds):pkglineflag    gc.collect()pkglineflag    try:pkglineflag        exec(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflagpkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        pkglineflagdef start(cmds):pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds)pkglineflag    port = blueprint[\"--port\"]pkglineflag    s = socket.socket()pkglineflag    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)pkglineflag    s.bind(('0.0.0.0', int(port)))pkglineflag    pkglineflag    s.listen(1)pkglineflagpkglineflag    while True:pkglineflag        cl, addr = s.accept()pkglineflag        print('Got a connection from %s' % str(addr))pkglineflag       pkglineflag        pkglineflag        cl_file = cl.makefile('rwb', 0)pkglineflag        line = str(cl_file.recv(1024*8),\"utf-8\").split(\"\\n\")pkglineflag        request_type = line[0].split(\" \")pkglineflag        if request_type[0] == \"GET\":pkglineflag            if request_type[1] == \"/hello\":pkglineflag                response = \"<h1>Hello Main Page</h1>\"pkglineflag                cl.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag                cl.send(response)pkglineflag            elif request_type[1] == \"/host\":pkglineflag                response = \"<h1>\"+line[1]+\"</h1>\"pkglineflag                cl.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag                cl.send(response)pkglineflag            elif request_type[1] == \"/\":pkglineflag                cl.send('HTTP/1.0 200 OK\\r\\nContent-type: text/html\\r\\n\\r\\n')pkglineflag                cl.send(web_page())pkglineflag            elif request_type[1] == \"/stop\":pkglineflag                cl.closepkglineflag                breakpkglineflagpkglineflagdef destart(cmds):pkglineflag    _thread.start_new_thread(start,([cmds]))pkglineflagdef web_page():pkglineflag    html = \"\"\"<html><head> <title>ESP Web Server</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">pkglineflag    <link rel=\"icon\" href=\"data:,\"> <style>html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;}pkglineflag    h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; pkglineflag    border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}pkglineflag    .button2{background-color: #4286f4;}</style></head><body> <h1>ESP Web Server</h1> pkglineflag    <p>GPIO state: <strong>\"\"\" + \"Hello\" + \"\"\"</strong></p><p><a href=\"/?led=on\"><button class=\"button\">ON</button></a></p>pkglineflag    <p><a href=\"/?led=off\"><button class=\"button button2\">OFF</button></a></p></body></html>\"\"\"pkglineflag    return htmlpkglineflagpkglineflag"
        }
    ]
}