{
    "name": "dc_motor",
    "codes": [
        {
            "filename": "dc_motorconfig.json",
            "code": "[]"
        },
        {
            "filename": "main.py",
            "code": "from machine import Pin,PWMpkglineflagimport utimepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagpkglineflagconfig_path=\"//app/dc_motor/dc_motorconfig.json\"pkglineflagpkglineflagclass DC_MotorUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no DC Motor pin named [PIN NAME] !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor var --name [PIN NAME] --backward [BACKWARD_PIN] --forward [FORWARD_PIN] --pwm [PWM] ')pkglineflag    def write_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor write [PIN NAME] --direction [DIRECTION] --speed [SPEED]')pkglineflag        LOG.info('\"direction\" have to be forward or backward')pkglineflag        LOG.info('\"speed\" is between 0 and 100')pkglineflag    def stop_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor stop [PIN NAME]')pkglineflag        LOG.info('dc_motor stop command stops DC Motor led named [PIN NAME]')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor delete [PIN NAME]')pkglineflag        LOG.info('dc_motor delete command deletes registered DC Motor pins by pin_name')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor show')pkglineflag        LOG.info('dc_motor show command simply prints registered DC Motor pins')pkglineflag    def update_usage():pkglineflag        LOG.info('\\nUsage:\\n->dc_motor update [PIN NAME]')pkglineflag        LOG.info('dc_motor update command updates registered DC Motor named [PIN NAME]')pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','stop']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> dc_motor help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'DC_MotorUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagpkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"dc_motor\",\"--name\":\"\",\"--backward\":\"\",\"forward\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering DC Motor pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    pkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"dc_motor\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new DC Motor pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagpkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"dc_motor\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The DC Motor pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            DC_MotorUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        DC_MotorUsage.delete_usage()pkglineflagpkglineflagpkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"dc_motor\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The DC Motor pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").show()pkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'dc_motor help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running DC Motor command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a DC Motor command?')pkglineflag        LOG.info(\"You can use 'dc_motor help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running DC Motor command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'dc_motor help' for available commands!\")pkglineflag    pkglineflag    pkglineflagdef write(cmds):pkglineflag    blueprint = {\"--speed\":\"100\",\"--direction\":\"\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").get_pin(cmds[0],cmds[2])pkglineflag    pkglineflag    if cmds[2] == pin[\"--name\"] and pin[\"pinType\"] == \"dc_motor\":pkglineflag        try:pkglineflag            dc_motor_bw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_fw = Pin(int(pin[\"--forward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_pwm = PWM(Pin(int(pin[\"--pwm\"])), freq=20000, duty=0)pkglineflag        except Exception as ex:pkglineflag            raise expkglineflag            LOG.error(ex)pkglineflag        try:pkglineflag            if blueprint[\"--direction\"] == \"backward\":pkglineflag                dc_motor_bw.on()pkglineflag                dc_motor_fw.off()pkglineflag                dc_motor_pwm.duty(int(int(blueprint[\"--speed\"])*1023/100))pkglineflag            elif blueprint[\"--direction\"] == \"forward\":pkglineflag                dc_motor_bw.off()pkglineflag                dc_motor_fw.on()pkglineflag                dc_motor_pwm.duty(int(int(blueprint[\"--speed\"])*1023/100))pkglineflag            pkglineflag        except Exception as ex:pkglineflag            raise expkglineflag            LOG.error(ex)pkglineflag        del dc_motor_bwpkglineflag        del dc_motor_fwpkglineflag        del dc_motor_pwmpkglineflag         pkglineflag         pkglineflagdef stop(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").get_pin(cmds[0],cmds[2])pkglineflag    pkglineflag    if cmds[2] == pin[\"--name\"] and pin[\"pinType\"] == \"dc_motor\":pkglineflag        try:pkglineflag            dc_motor_bw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_fw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_pwm = PWM(Pin(int(pin[\"--pwm\"])), freq=20000, duty=0)pkglineflag        except Exception as ex:pkglineflag            raise expkglineflag            LOG.error(ex)pkglineflag        pkglineflag        del dc_motor_bwpkglineflag        del dc_motor_fwpkglineflag        del dc_motor_pwmpkglineflag"
        }
    ]
}
