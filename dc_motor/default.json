{
    "name": "dc_motor",
    "codes": [
        {
            "filename": "dc_motorconfig.json",
            "code": "[]"
        },
        {
            "filename": "main.py",
            "code": "from machine import Pin,PWMpkglineflagimport utimepkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagimport ujsonpkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagpkglineflagconfig_path=\"//app/dc_motor/dc_motorconfig.json\"pkglineflagpkglineflagpkglineflagclass DC_MotorUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        return LOG.error(f'There is no DC Motor pin named [PIN NAME] !')pkglineflag    def var_usage():pkglineflag        return LOG.info(' -> dc_motor var --name [PIN NAME] --backward [BACKWARD_PIN] --forward [FORWARD_PIN] --pwm [PWM] ')pkglineflag    def write_usage():pkglineflag        message = \"\"pkglineflag        message += LOG.info(' -> dc_motor write [PIN NAME] --direction [DIRECTION] --speed [SPEED]') + '\\n'pkglineflag        message += LOG.info('[DIRECTION] have to be forward or backward') + '\\n'pkglineflag        message += LOG.info('[SPEED] is between 0 and 100')pkglineflag        return messagepkglineflag    def stop_usage():pkglineflag        return LOG.info(' -> dc_motor stop [PIN NAME]') +'\\n'+ LOG.info('dc_motor stop command stops DC Motor led named [PIN NAME]')pkglineflag    def delete_usage():pkglineflag        return LOG.info(' -> dc_motor delete [PIN NAME]') +'\\n'+ LOG.info('dc_motor delete command deletes registered DC Motor pins by pin_name')pkglineflag    def show_usage():pkglineflag        return LOG.info(' -> dc_motor show') + '\\n' + LOG.info('dc_motor show command simply prints registered DC Motor pins')pkglineflag    def update_usage():pkglineflag        return LOG.info(' -> dc_motor update [PIN NAME]') +'\\n'+ LOG.info('dc_motor update command updates registered DC Motor named [PIN NAME]')pkglineflag    pkglineflag    pkglineflagdef help(cmds):   pkglineflag    message = \"\"pkglineflag    command_list = ['var','show','delete','update','write','stop']pkglineflag    if not len(cmds) > 2:pkglineflag        for command in command_list:pkglineflag            message += commandpkglineflag            message += '\\n'pkglineflag        return 'Commands:\\n'+message+LOG.info('For more information about commands -> dc_motor help [COMMAND]')pkglineflag    try:pkglineflag        return eval('DC_MotorUsage.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        return LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflagpkglineflagpkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"dc_motor\",\"--name\":\"\",\"--backward\":\"\",\"--forward\":\"\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            return LOG.error('Error while registering DC Motor pin!')+'\\n'+LOG.error('Missing Argument(s)!')pkglineflag    PinCommands(cmds, path=config_path,pin_type=\"dc_motor\").register(blueprint)pkglineflag    return LOG.debug('The new DC Motor pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflagpkglineflagpkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds, path=config_path, pin_type=\"dc_motor\", pin_name=cmds[2]).delete()pkglineflag        if founded == False and cmds[2] == \"all\":pkglineflag            return LOG.debug('All DC Motor pins successfully deleted.')pkglineflag        elif founded:pkglineflag            return LOG.debug('The DC Motor pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            return DC_MotorUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        return LOG.error(\"Missing arg(s)\")+'\\n'+DC_MotorUsage.delete_usage()pkglineflag    pkglineflagpkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"dc_motor\",pin_name=cmds[2]).update()pkglineflag    return LOG.debug('The DC Motor pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").show()pkglineflagpkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+'\\n'+LOG.info(\"You can use 'dc_motor help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return \"ERROR\"pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running DC Motor command\")+'\\n'+LOG.error(f'Is the \"{cmds[1]}\" a DC Motor command?')+'\\n'+LOG.info(\"You can use 'dc_motor help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running DC Motor command!\")+'\\n'+LOG.error(ex)+'\\n'+LOG.error(\"You can use 'dc_motor help' for available commands!\")pkglineflag       pkglineflag       pkglineflagdef write(cmds):pkglineflag    blueprint = {\"--speed\":\"100\",\"--direction\":\"\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").get_pin(cmds[0],cmds[2])pkglineflag    pkglineflag    if cmds[2] == pin[\"--name\"] and pin[\"pinType\"] == \"dc_motor\":pkglineflag        try:pkglineflag            dc_motor_bw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_fw = Pin(int(pin[\"--forward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_pwm = PWM(Pin(int(pin[\"--pwm\"])), freq=20000, duty=0)pkglineflag        except Exception as ex:pkglineflag            del dc_motor_bwpkglineflag            del dc_motor_fwpkglineflag            del dc_motor_pwmpkglineflag            return LOG.error(ex)pkglineflag        try:pkglineflag            if blueprint[\"--direction\"] == \"backward\":pkglineflag                dc_motor_bw.on()pkglineflag                dc_motor_fw.off()pkglineflag                dc_motor_pwm.duty(int(int(blueprint[\"--speed\"])*1023/100))pkglineflag            elif blueprint[\"--direction\"] == \"forward\":pkglineflag                dc_motor_bw.off()pkglineflag                dc_motor_fw.on()pkglineflag                dc_motor_pwm.duty(int(int(blueprint[\"--speed\"])*1023/100))pkglineflag            return LOG.info(\"The DC Motor named {} is executed successfully.\".format(pin[\"--name\"]))pkglineflag        except Exception as ex:pkglineflag            del dc_motor_bwpkglineflag            del dc_motor_fwpkglineflag            del dc_motor_pwmpkglineflag            return LOG.error(ex)pkglineflag    return LOG.error(\"The DC Motor is couldn't executed.\")pkglineflag         pkglineflag         pkglineflagdef stop(cmds):pkglineflag    blueprint = {}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"dc_motor\").get_pin(cmds[0],cmds[2])pkglineflag    pkglineflag    if cmds[2] == pin[\"--name\"] and pin[\"pinType\"] == \"dc_motor\":pkglineflag        try:pkglineflag            dc_motor_bw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_fw = Pin(int(pin[\"--backward\"]),Pin.OUT,value=0)pkglineflag            dc_motor_pwm = PWM(Pin(int(pin[\"--pwm\"])), freq=20000, duty=0)pkglineflag            return LOG.info(\"The DC Motor named {} is stopped successfully.\".format(pin[\"--name\"]))pkglineflag        except Exception as ex:pkglineflag            del dc_motor_bwpkglineflag            del dc_motor_fwpkglineflag            del dc_motor_pwmpkglineflag            return LOG.error(ex)pkglineflag    return LOG.error(\"The DC Motor is couldn't stopped.\")pkglineflag"
        }
    ]
}