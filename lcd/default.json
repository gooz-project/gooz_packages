{
    "name": "lcd",
    "codes": [
        {
            "filename": "i2c_lcd.py",
            "code": "from app.lcd.lcd_api import LcdApipkglineflagfrom time import sleep_mspkglineflagpkglineflagDEFAULT_I2C_ADDR = 0x27pkglineflagMASK_RS = 0x01pkglineflagMASK_RW = 0x02pkglineflagMASK_E = 0x04pkglineflagSHIFT_BACKLIGHT = 3pkglineflagSHIFT_DATA = 4pkglineflagpkglineflagclass I2cLcd(LcdApi):pkglineflagpkglineflag    def __init__(self, i2c, i2c_addr, num_lines, num_columns):pkglineflag        self.i2c = i2cpkglineflag        self.i2c_addr = i2c_addrpkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([0]))pkglineflag        sleep_ms(20)pkglineflag        self.hal_write_init_nibble(self.LCD_FUNCTION_RESET)pkglineflag        sleep_ms(5)pkglineflag        self.hal_write_init_nibble(self.LCD_FUNCTION_RESET)pkglineflag        sleep_ms(1)pkglineflag        self.hal_write_init_nibble(self.LCD_FUNCTION_RESET)pkglineflag        sleep_ms(1)pkglineflag        self.hal_write_init_nibble(self.LCD_FUNCTION)pkglineflag        sleep_ms(1)pkglineflag        LcdApi.__init__(self, num_lines, num_columns)pkglineflag        cmd = self.LCD_FUNCTIONpkglineflag        if num_lines > 1:pkglineflag            cmd |= self.LCD_FUNCTION_2LINESpkglineflag        self.hal_write_command(cmd)pkglineflagpkglineflag    def hal_write_init_nibble(self, nibble):pkglineflag        byte = ((nibble >> 4) & 0x0f) << SHIFT_DATApkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte | MASK_E]))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte]))pkglineflagpkglineflag    def hal_backlight_on(self):pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([1 << SHIFT_BACKLIGHT]))pkglineflagpkglineflag    def hal_backlight_off(self):pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([0]))pkglineflagpkglineflag    def hal_write_command(self, cmd):pkglineflag        byte = ((self.backlight << SHIFT_BACKLIGHT) | (((cmd >> 4) & 0x0f) << SHIFT_DATA))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte | MASK_E]))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte]))pkglineflag        byte = ((self.backlight << SHIFT_BACKLIGHT) | ((cmd & 0x0f) << SHIFT_DATA))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte | MASK_E]))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte]))pkglineflag        if cmd <= 3:pkglineflag            sleep_ms(5)pkglineflagpkglineflag    def hal_write_data(self, data):pkglineflag        byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | (((data >> 4) & 0x0f) << SHIFT_DATA))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte | MASK_E]))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte]))pkglineflag        byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | ((data & 0x0f) << SHIFT_DATA))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte | MASK_E]))pkglineflag        self.i2c.writeto(self.i2c_addr, bytearray([byte]))"
        },
        {
            "filename": "lcdconfig.json",
            "code": "[]"
        },
        {
            "filename": "lcd_api.py",
            "code": "import timepkglineflagpkglineflagclass LcdApi:pkglineflag    pkglineflag    LCD_CLR = 0x01pkglineflag    LCD_HOME = 0x02pkglineflagpkglineflag    LCD_ENTRY_MODE = 0x04pkglineflag    LCD_ENTRY_INC = 0x02pkglineflag    LCD_ENTRY_SHIFT = 0x01pkglineflagpkglineflag    LCD_ON_CTRL = 0x08pkglineflag    LCD_ON_DISPLAY = 0x04pkglineflag    LCD_ON_CURSOR = 0x02pkglineflag    LCD_ON_BLINK = 0x01pkglineflagpkglineflag    LCD_MOVE = 0x10pkglineflag    LCD_MOVE_DISP = 0x08pkglineflag    LCD_MOVE_RIGHT = 0x04pkglineflagpkglineflag    LCD_FUNCTION = 0x20pkglineflag    LCD_FUNCTION_8BIT = 0x10pkglineflag    LCD_FUNCTION_2LINES = 0x08pkglineflag    LCD_FUNCTION_10DOTS = 0x04pkglineflag    LCD_FUNCTION_RESET = 0x30pkglineflagpkglineflag    LCD_CGRAM = 0x40pkglineflag    LCD_DDRAM = 0x80pkglineflagpkglineflag    LCD_RS_CMD = 0pkglineflag    LCD_RS_DATA = 1pkglineflagpkglineflag    LCD_RW_WRITE = 0pkglineflag    LCD_RW_READ = 1pkglineflagpkglineflag    def __init__(self, num_lines, num_columns):pkglineflag        self.num_lines = num_linespkglineflag        if self.num_lines > 4:pkglineflag            self.num_lines = 4pkglineflag        self.num_columns = num_columnspkglineflag        if self.num_columns > 40:pkglineflag            self.num_columns = 40pkglineflag        self.cursor_x = 0pkglineflag        self.cursor_y = 0pkglineflag        self.implied_newline = Falsepkglineflag        self.backlight = Truepkglineflag        self.display_off()pkglineflag        self.backlight_on()pkglineflag        self.clear()pkglineflag        self.hal_write_command(self.LCD_ENTRY_MODE | self.LCD_ENTRY_INC)pkglineflag        self.hide_cursor()pkglineflag        self.display_on()pkglineflagpkglineflag    def clear(self):pkglineflag        self.hal_write_command(self.LCD_CLR)pkglineflag        self.hal_write_command(self.LCD_HOME)pkglineflag        self.cursor_x = 0pkglineflag        self.cursor_y = 0pkglineflagpkglineflag    def hide_cursor(self):pkglineflag        self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY)pkglineflagpkglineflag    def blink_cursor_on(self):pkglineflag        self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY |pkglineflag                               self.LCD_ON_CURSOR | self.LCD_ON_BLINK)pkglineflagpkglineflag    def display_on(self):pkglineflag        self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY)pkglineflagpkglineflag    def display_off(self):pkglineflag        self.hal_write_command(self.LCD_ON_CTRL)pkglineflagpkglineflag    def backlight_on(self):pkglineflag        self.backlight = Truepkglineflag        self.hal_backlight_on()pkglineflagpkglineflag    def backlight_off(self):pkglineflag        self.backlight = Falsepkglineflag        self.hal_backlight_off()pkglineflagpkglineflag    def move_to(self, cursor_x, cursor_y):pkglineflag        self.cursor_x = cursor_xpkglineflag        self.cursor_y = cursor_ypkglineflag        addr = cursor_x & 0x3fpkglineflag        if cursor_y & 1:pkglineflag            addr += 0x40pkglineflag        if cursor_y & 2:pkglineflag            addr += self.num_columnspkglineflag        self.hal_write_command(self.LCD_DDRAM | addr)pkglineflagpkglineflag    def putchar(self, char):pkglineflag        if char == '\\n':pkglineflag            if self.implied_newline:pkglineflag                self.implied_newline = Falsepkglineflag            else:pkglineflag                self.cursor_x = self.num_columnspkglineflag        else:pkglineflag            self.hal_write_data(ord(char))pkglineflag            self.cursor_x += 1pkglineflag        if self.cursor_x >= self.num_columns:pkglineflag            self.cursor_x = 0pkglineflag            self.cursor_y += 1pkglineflag            self.implied_newline = (char != '\\n')pkglineflag        if self.cursor_y >= self.num_lines:pkglineflag            self.cursor_y = 0pkglineflag        self.move_to(self.cursor_x, self.cursor_y)pkglineflagpkglineflag    def putstr(self, string):pkglineflag        for char in string:pkglineflag            self.putchar(char)pkglineflagpkglineflag    def custom_char(self, location, charmap):pkglineflag        location &= 0x7pkglineflag        self.hal_write_command(self.LCD_CGRAM | (location << 3))pkglineflag        self.hal_sleep_us(40)pkglineflag        for i in range(8):pkglineflag            self.hal_write_data(charmap[i])pkglineflag            self.hal_sleep_us(40)pkglineflag        self.move_to(self.cursor_x, self.cursor_y)pkglineflagpkglineflag    def hal_backlight_on(self):pkglineflag        passpkglineflagpkglineflag    def hal_backlight_off(self):pkglineflag        passpkglineflagpkglineflag    def hal_write_command(self, cmd):pkglineflag        raise NotImplementedErrorpkglineflagpkglineflag    def hal_write_data(self, data):pkglineflag        raise NotImplementedErrorpkglineflagpkglineflag    def hal_sleep_us(self, usecs):pkglineflag        time.sleep_us(usecs) "
        },
        {
            "filename": "main.py",
            "code": "from machine import Pin, SoftI2Cpkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.pin.core import CommonCommands as PinCommandspkglineflagfrom app.lcd.i2c_lcd import I2cLcdpkglineflagfrom time import sleep as delaypkglineflagpkglineflagconfig_path = '//app/lcd/lcdconfig.json'pkglineflagpkglineflagclass LCDUsage():pkglineflag    def error_undefined_pin(pin_name):pkglineflag        LOG.error(f'There is no LCD pin named \"{pin_name}\" !')pkglineflag    def var_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd var --name [PIN_NAME] --scl [SCL_PIN] --sda [SDA_PIN] --address [I2C_ADDRESS] --size [LCD_SIZE]')pkglineflag        LOG.info('[LCD_SIZE] must be entered as COLUMNxLINE')pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd delete [PIN_NAME]')pkglineflag        LOG.info('lcd delete command deletes registered LCD pins by [PIN_NAME]')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd show')pkglineflag        LOG.info('lcd show command simply prints registered LCD pins')pkglineflag    def update_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd update [PIN_NAME]')pkglineflag        LOG.info('lcd update command updates registered LCD named [PIN_NAME]')pkglineflag    def write_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd write [PIN_NAME] --cursor x,y [DATA]')pkglineflag        LOG.info('Writes data to display')pkglineflag        LOG.info('Sets the cursor with --cursor parameter.If not entered, default cursor is set to 0,0')pkglineflag    def clear_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd clear [PIN_NAME]')pkglineflag        LOG.info('Clears the LCD screen')pkglineflag    def off_usage():pkglineflag        LOG.info('\\nUsage:\\n->lcd off [PIN_NAME]')pkglineflag        LOG.info('Turns off the backlight and display of the LCD screen')pkglineflag        pkglineflagpkglineflagdef help(cmds):pkglineflag    command_list = ['var','show','delete','update','write','clear','off']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        LOG.info('For more information about commands -> lcd help [COMMAND]')pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'LCDUsage.{cmds[2]}_usage()')pkglineflag    except:pkglineflag        LOG.error(f'There is no help for \"{cmds[2]}\"!')pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'lcd help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec(f'{cmds[1]}({cmds})')pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running LCD command\")pkglineflag        LOG.error(f'Is the \"{cmds[1]}\" a LCD command?')pkglineflag        LOG.info(\"You can use 'lcd help' for available commands!\")pkglineflag    pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"lcd\", \"--name\":\"\", \"--scl\":\"\", \"--sda\":\"\", \"--freq\":\"20000\", \"--address\":\"\" , \"--size\":\"\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering lcd pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            missing_arg = Truepkglineflag            breakpkglineflag    if missing_arg:pkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path,pin_type=\"lcd\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new LCD pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,path=config_path,pin_type=\"lcd\").show()pkglineflag        pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,path=config_path,pin_type=\"lcd\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The lcd pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            LCDUsage.error_undefined_pin(cmds[2])pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        LCDUsage.delete_usage()pkglineflag            pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"lcd\",pin_name=cmds[2]).update()pkglineflag    LOG.debug('The lcd pin named \"{}\" successfully updated.'.format(cmds[2]))pkglineflagpkglineflagdef write(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"lcd\").get_pin(cmds[0],cmds[2])pkglineflag    i2c = SoftI2C(scl=Pin(int(pin[\"--scl\"])),sda=Pin(int(pin[\"--sda\"])),freq=int(pin[\"--freq\"]))pkglineflag    line = pin[\"--size\"].split(\"x\")[1]pkglineflag    column = pin[\"--size\"].split(\"x\")[0]pkglineflag    try:pkglineflag        lcd = I2cLcd(i2c, int(pin[\"--address\"]), int(line), int(column))pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        del pinpkglineflag        returnpkglineflag    blueprint = {\"--cursor\":\"0,0\"}pkglineflag    blueprint = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    if cmds[3] == \"--cursor\":pkglineflag        index = 5pkglineflag    else:pkglineflag        index = 3pkglineflag    try:pkglineflag        x = blueprint[\"--cursor\"].split(\",\")[0]pkglineflag        y = blueprint[\"--cursor\"].split(\",\")[1]pkglineflag        lcd.backlight_on()pkglineflag        lcd.display_on()pkglineflag        lcd.blink_cursor_on()pkglineflag        delay(0.5)pkglineflag        lcd.move_to(int(x),int(y))pkglineflag        lcd.blink_cursor_on()pkglineflag        delay(0.5)pkglineflag    except Exception:pkglineflag        LCDUsage.write_usage()pkglineflag        returnpkglineflag    string = \"\"pkglineflag    lst = cmds[index:]pkglineflag    for i in lst:pkglineflag        string += ipkglineflag        string += \" \"pkglineflag    lenght = int(line)*int(column)pkglineflag    lcd.putstr(string[0:lenght])pkglineflag    delay(5)pkglineflag    lcd.putstr(string[lenght:])pkglineflag    lcd.hide_cursor()pkglineflagpkglineflagdef clear(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"lcd\").get_pin(cmds[0],cmds[2])pkglineflag    i2c = SoftI2C(scl=Pin(int(pin[\"--scl\"])),sda=Pin(int(pin[\"--sda\"])),freq=int(pin[\"--freq\"]))pkglineflag    line = pin[\"--size\"].split(\"x\")[1]pkglineflag    column = pin[\"--size\"].split(\"x\")[0]pkglineflag    try:pkglineflag        lcd = I2cLcd(i2c, int(pin[\"--address\"]), int(line), int(column))pkglineflag        del pinpkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag    lcd.clear()pkglineflag    del lcd,i2cpkglineflagpkglineflagdef off(cmds):pkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"lcd\").get_pin(cmds[0],cmds[2])pkglineflag    i2c = SoftI2C(scl=Pin(int(pin[\"--scl\"])),sda=Pin(int(pin[\"--sda\"])),freq=int(pin[\"--freq\"]))pkglineflag    line = pin[\"--size\"].split(\"x\")[1]pkglineflag    column = pin[\"--size\"].split(\"x\")[0]pkglineflag    try:pkglineflag        lcd = I2cLcd(i2c, int(pin[\"--address\"]), int(line), int(column))pkglineflag        del pinpkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag    lcd.backlight_off()pkglineflag    lcd.display_off()pkglineflag    del lcd,i2cpkglineflag"
        }
    ]
}