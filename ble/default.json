{
    "name": "ble",
    "codes": [
        {
            "filename": "ble.py",
            "code": "import ubluetoothpkglineflagpkglineflagble_msg = \"\"pkglineflagis_ble_connected = Falsepkglineflagcheck_import = Truepkglineflagpkglineflagclass ESP32_BLE():pkglineflagpkglineflag    def __init__(self, name):pkglineflag        self.name = namepkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(True)pkglineflag        self.disconnected()pkglineflag        self.ble.irq(self.ble_irq)pkglineflag        self.register()pkglineflag        self.advertiser()pkglineflagpkglineflag    def connected(self):pkglineflag        global is_ble_connectedpkglineflag        is_ble_connected = Truepkglineflagpkglineflag    def disconnected(self):pkglineflag        global is_ble_connectedpkglineflag        is_ble_connected = Falsepkglineflagpkglineflag    def ble_irq(self, event, data):pkglineflag        global ble_msgpkglineflag        pkglineflag        if event == 1: #_IRQ_CENTRAL_CONNECTpkglineflag            print(\"Device has connected via BLE!\")pkglineflag            self.connected()pkglineflagpkglineflag        elif event == 2: #_IRQ_CENTRAL_DISCONNECTpkglineflag            print(\"BLE connection lost!\")pkglineflag            self.advertiser()pkglineflag            self.disconnected()pkglineflag        pkglineflag        elif event == 3: #_IRQ_GATTS_WRITEpkglineflag            print(\"A message was received from BLE!\\n\")pkglineflag            buffer = self.ble.gatts_read(self.rx)pkglineflag            ble_msg = buffer.decode('UTF-8').strip()pkglineflag            print(\"Message : \" + ble_msg)pkglineflagpkglineflag            pkglineflag    def register(self):        pkglineflag        # Nordic UART Service (NUS)pkglineflag        NUS_UUID = '6E400001-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        RX_UUID = '6E400002-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        TX_UUID = '6E400003-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag            pkglineflag        BLE_NUS = ubluetooth.UUID(NUS_UUID)pkglineflag        BLE_RX = (ubluetooth.UUID(RX_UUID), ubluetooth.FLAG_WRITE)pkglineflag        BLE_TX = (ubluetooth.UUID(TX_UUID), ubluetooth.FLAG_NOTIFY)pkglineflag            pkglineflag        BLE_UART = (BLE_NUS, (BLE_TX, BLE_RX,))pkglineflag        SERVICES = (BLE_UART, )pkglineflag        ((self.tx, self.rx,), ) = self.ble.gatts_register_services(SERVICES)pkglineflagpkglineflag    def send(self, data):pkglineflag        try:pkglineflag            self.ble.gatts_notify(0, self.tx, data + '\\n')pkglineflag        except OSError:pkglineflag            print(\"There is no BLE connection!\")pkglineflag            print(\"Message could not be sent.\")pkglineflag            pkglineflag    def advertiser(self): #SETS BROADCASTER ROLEpkglineflag        name = bytes(self.name, 'UTF-8')pkglineflag        adv_data = bytearray('\\x02\\x01\\x02') + bytearray((len(name) + 1, 0x09)) + namepkglineflag        self.ble.gap_advertise(100, adv_data)pkglineflagpkglineflagble_name = \"ESP32_BLE\"pkglineflagble = ESP32_BLE(ble_name)pkglineflag"
        }
    ],
    "managersnip": "pkglineflag    elif cmd_array[0] == \"ble\":pkglineflag        ble_cnn_check = Falsepkglineflag        if cmd_array[1] == \"on\":pkglineflag            try:pkglineflag                global ble_pypkglineflag                import app.ble.ble as ble_pypkglineflag            except:pkglineflag                print(\"Could Not Turned On\")pkglineflag                pkglineflag                '''pkglineflag        elif cmd_array[1] == \"name\":pkglineflag            if cmd_array[2] == None:pkglineflag                print(\"Missing Argument, Process Terminated.\")pkglineflag            else:pkglineflag                with open(\"/app/ble/config.txt\") as config:pkglineflag                    counter = 0pkglineflag                    keys = []pkglineflag                    values = []pkglineflag                    lines = config.readlines()pkglineflag                    for line in lines:pkglineflag                        splitted = line.rsplit('=')pkglineflag                        keys.append(splitted[0])pkglineflag                        values.append(splitted[1])pkglineflag                        for key in keys:pkglineflag                            if key == \"name\":pkglineflag                                breakpkglineflag                            counter = counter + 1pkglineflag                        values[counter] = cmd_array[3]pkglineflag                with open(\"/app/ble/config.txt\", \"w\") as config:pkglineflag                    for i in len(keys):pkglineflag                        config.write(keys[i] + \"=\" + values[i])'''pkglineflag                pkglineflag        elif cmd_array[1] == \"status\":pkglineflag            try:pkglineflag                if ble_py.is_ble_connected:pkglineflag                    print(\"BLE ON\\nConnection Status : Connected\")pkglineflag                else:pkglineflag                    print(\"BLE ON\\nConnection Status : Not Connected\")pkglineflag            except(NameError):pkglineflag                print(\"BLE IS CLOSE!\")pkglineflag        elif cmd_array[1] == \"send\":pkglineflag            try:pkglineflag                msg=\"\"pkglineflag                for i in range(len(cmd_array)):pkglineflag                    if i>1:pkglineflag                        msg = msg + \" \" + cmd_array[i]pkglineflag                ble_py.ble.send(msg)pkglineflag            except(NameError):pkglineflag                print(\"BLE IS CLOSE!\")pkglineflag            except(IndexError):pkglineflag                print(\"No Message Entry. Process Terminated.\")pkglineflag        elif cmd_array[1] == \"off\":pkglineflag            try:pkglineflag                del ble_py.blepkglineflag                del ble_pypkglineflag            except(KeyError):pkglineflag                print(\"BLE has already been off.\")pkglineflag"
}
