{
    "name": "ble",
    "codes": [
        {
            "filename": "gooz_ble.py",
            "code": "import ubluetoothpkglineflagpkglineflagble_msg = \"\"pkglineflagis_ble_connected = Falsepkglineflagpkglineflagclass ESP32_BLE():pkglineflagpkglineflag    def __init__(self, name):pkglineflag        self.name = namepkglineflag        self.ble = ubluetooth.BLE()pkglineflag        self.ble.active(True)pkglineflag        self.disconnected()pkglineflag        self.ble.irq(self.ble_irq)pkglineflag        self.register()pkglineflag        self.advertiser()pkglineflagpkglineflag    def connected(self):pkglineflag        global is_ble_connectedpkglineflag        is_ble_connected = Truepkglineflagpkglineflag    def disconnected(self):pkglineflag        global is_ble_connectedpkglineflag        is_ble_connected = Falsepkglineflagpkglineflag    def ble_irq(self, event, data):pkglineflag        global ble_msgpkglineflag        pkglineflag        if event == 1: #_IRQ_CENTRAL_CONNECTpkglineflag            print(\"Device has connected via BLE!\")pkglineflag            self.connected()pkglineflagpkglineflag        elif event == 2: #_IRQ_CENTRAL_DISCONNECTpkglineflag            print(\"BLE connection lost!\")pkglineflag            self.advertiser()pkglineflag            self.disconnected()pkglineflag        pkglineflag        elif event == 3: #_IRQ_GATTS_WRITEpkglineflag            print(\"A message was received from BLE!\\n\")pkglineflag            buffer = self.ble.gatts_read(self.rx)pkglineflag            ble_msg = buffer.decode('UTF-8').strip()pkglineflag            print(\"Message : \" + ble_msg)pkglineflagpkglineflag            pkglineflag    def register(self):        pkglineflag        # Nordic UART Service (NUS)pkglineflag        NUS_UUID = '6E400001-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        RX_UUID = '6E400002-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag        TX_UUID = '6E400003-B5A3-F393-E0A9-E50E24DCCA9E'pkglineflag            pkglineflag        BLE_NUS = ubluetooth.UUID(NUS_UUID)pkglineflag        BLE_RX = (ubluetooth.UUID(RX_UUID), ubluetooth.FLAG_WRITE)pkglineflag        BLE_TX = (ubluetooth.UUID(TX_UUID), ubluetooth.FLAG_NOTIFY)pkglineflag            pkglineflag        BLE_UART = (BLE_NUS, (BLE_TX, BLE_RX,))pkglineflag        SERVICES = (BLE_UART, )pkglineflag        ((self.tx, self.rx,), ) = self.ble.gatts_register_services(SERVICES)pkglineflagpkglineflag    def send(self, data):pkglineflag        try:pkglineflag            self.ble.gatts_notify(0, self.tx, data + '\\n')pkglineflag            print(\"Message Sent\")pkglineflag        except OSError:pkglineflag            print(\"There is no BLE connection!\")pkglineflag            print(\"Message could not be sent.\")pkglineflag            pkglineflag    def advertiser(self): #SETS BROADCASTER ROLEpkglineflag        name = bytes(self.name, 'UTF-8')pkglineflag        adv_data = bytearray('\\x02\\x01\\x02') + bytearray((len(name) + 1, 0x09)) + namepkglineflag        self.ble.gap_advertise(100, adv_data)pkglineflag        pkglineflagble = ESP32_BLE(\"ESP32\")pkglineflagdef ble_name(name):pkglineflag    ble = ESP32_BLE(name)pkglineflag    print(\"Broadcasting name has changed.\")pkglineflag    pkglineflagdef status():pkglineflag    if is_ble_connected:pkglineflag        print(\"BLE Connected!\")pkglineflag    else:pkglineflag        print(\"BLE Not Connected!\")pkglineflagpkglineflagdef send(message):pkglineflag    ble.send(message)pkglineflagpkglineflag"
        }
    ],
    "managersnip": "pkglineflag    elif cmd_array[0] == \"ble\":pkglineflag        import app.ble.gooz_blepkglineflag        if cmd_array[1] == \"status\":pkglineflag            app.ble.gooz_ble.status()pkglineflag        elif cmd_array[1] == \"name\"pkglineflag            app.ble.gooz_ble.ble_name(cmd_array[2])pkglineflag        elif cmd_array[1] == \"send\":pkglineflag            app.ble.gooz_ble.send(cmd_array[2])pkglineflag        else:pkglineflag            print(\"Unknown Command!\")pkglineflagpkglineflag"
}
