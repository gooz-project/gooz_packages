{
    "name": "hcsr04",
    "codes": [
        {
            "filename": "hcsr04lib.py",
            "code": "from machine import Pin,time_pulse_uspkglineflagimport utimepkglineflagpkglineflagclass HCSR04:pkglineflag    def __init__(self,trig_pin,echo_pin,echo_timeout=30000):pkglineflag        self.trigger=Pin(trig_pin,Pin.OUT,pull=None)pkglineflag        self.trigger.value(0)pkglineflag        self.echo_timeout = echo_timeoutpkglineflag        self.echo = Pin(echo_pin,Pin.IN,pull=None)pkglineflag    pkglineflag    def send_and_wait(self):pkglineflag        self.trigger.value(0)pkglineflag        utime.sleep_us(5)pkglineflag        self.trigger.value(1)pkglineflag        pkglineflag        pulse_time = time_pulse_us(self.echo,1,self.echo_timeout)pkglineflag        return pulse_timepkglineflag        pkglineflag    def distance_cm(self):pkglineflag        pulse_time=self.send_and_wait()pkglineflag        cm = (pulse_time/2)/29.1pkglineflag        return cmpkglineflag    pkglineflag    def distance_mm(self):pkglineflag        pulse_time = self.send_and_wait()pkglineflag        mm = (pulse_time*100)//582pkglineflag        return mmpkglineflag    pkglineflag    def distance_inch(self):pkglineflag        inch= self.distance_cm()*0.3937007874pkglineflag        return inch   "
        },
        {
            "filename": "main.py",
            "code": "from app.hcsr04.hcsr04lib import HCSR04pkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom machine import Pin,RTCpkglineflagfrom dev.pin.core import CommonCommands as PinCommands pkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagconfig_path=\"//app/hcsr04/hcsr04config.json\"pkglineflagexit_listen_flag = Falsepkglineflagpkglineflagclass HCR04Errors():pkglineflag    def float_error(sleep_time):#sleep time must be floatpkglineflag        LOG.error('Error while listening hcsr04 Pin!')pkglineflag        LOG.error('Is type of \"{}\" a float?'.format(sleep_time))pkglineflag    def undefined_pin_name(pin_name):pkglineflag        print(\"\")pkglineflag        LOG.error('There is no hcsr04 pin named \"{}\" !'.format(pin_name))pkglineflag    def register_usage():pkglineflag        LOG.info('\\nUsage:\\nhcsr04 register --name [PIN_NAME] --trig [TRIG_PIN_NUMBER] --echo [ECHO_PIN_NUMBER] --echo_timeout [ECHO_TIMEOUT]')pkglineflag        LOG.info('Default echo_timeout : 20000')pkglineflag    def listen_usage():pkglineflag        LOG.info('Usage -> hcsr04 listen [PIN_NAME] --delay [SLEEP_TIME] --file [FILE_NAME] --end [END_CHARACTER]')pkglineflag        LOG.info('[SLEEP_TIME] is not necessary! Default value: 1 second')pkglineflag        LOG.info(\"[FILE_NAME] is not necessary! If empty it will not be saved\")pkglineflag        LOG.info(\"[END_CHARACTER] is not necessary! Default value: '\\\\n' \")pkglineflag    def delete_usage():pkglineflag        LOG.info('\\nUsage:\\nhcsr04 delete [PIN_NAME]')pkglineflag        LOG.info('hcsr04 delete command deletes registered hcsr04 pins by pin_name')pkglineflag    def show_usage():pkglineflag        LOG.info('\\nUsage:\\nhcsr04 show')pkglineflag        LOG.info('hcsr04 show command simply prints registered hcsr04 pins')pkglineflag    def unknown_unit_error(unit):pkglineflag        LOG.error('The \"{}\" as unit is unknown!')pkglineflag        LOG.info('Unit can be \"cm\" \"mm\" or \"inch\"')pkglineflagdef help(cmds):pkglineflag    command_list = ['register','show','delete','update','measure','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        print('Commands: ')pkglineflag        for command in command_list:pkglineflag            print(command)pkglineflag        returnpkglineflag    try:pkglineflag        exec('HCR04Errors.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflag    pkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        LOG.error(\"Please enter a command!\")pkglineflag        LOG.info(\"You can use 'hcrs04 help' for available commands!\")pkglineflag        returnpkglineflag    if cmds[1][0] == '_':pkglineflag        returnpkglineflag    try:pkglineflag        exec('{}({})'.format(cmds[1], cmds))pkglineflag    except NameError:pkglineflag        LOG.error(\"There is a problem while running hcsr04 command\")pkglineflag        LOG.error('Is the \"{}\" a hcsr04 command?'.format(cmds[1]))pkglineflag        LOG.info(\"You can use 'hcdsr04 help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        LOG.error(\"There is a problem while running hcsr04 command!\")pkglineflag        LOG.error(str(ex))pkglineflag        LOG.error(\"You can use 'hcsr04 help' for avaible commands!\")pkglineflag#------pkglineflagdef register(cmds):pkglineflag    blueprint={\"pinType\":\"hcsr04\",\"--name\":\"\",\"--trig\":\"\",\"--echo\":\"\",\"--unit\":\"cm\",\"--echo_timeout\":\"20000\"}pkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    missing = Falsepkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            LOG.error('Error while registering hcsr04 pin!')pkglineflag            LOG.error('Missing Argument(s)!')pkglineflag            HCR04Errors.register_usage()pkglineflag            missing=Truepkglineflag            breakpkglineflag    if missing:pkglineflag        returnpkglineflag    blueprint = PinCommands(cmds, path=config_path, pin_type=\"hcsr04\").register(blueprint)pkglineflag    if blueprint:   pkglineflag        LOG.debug('The new hcsr04 pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflag    del blueprintpkglineflagpkglineflagdef show(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"hcsr04\").show()pkglineflag    pkglineflagdef delete(cmds):pkglineflag    try: pkglineflag        founded = PinCommands(cmds,config_path,pin_type=\"hcsr04\",pin_name=cmds[2]).delete()pkglineflag        if founded:pkglineflag            LOG.debug('The hcsr04 pin named \"{}\" successfully deleted.'.format(cmds[2]))pkglineflag        else:pkglineflag            HCSR04Errors.undefined_pin_name()pkglineflag    except IndexError:pkglineflag        LOG.error(\"Missing arg(s)\")pkglineflag        HCSR04Errors.delete_usage()pkglineflag        pkglineflagdef update(cmds):pkglineflag    PinCommands(cmds,config_path,pin_type=\"hcsr04\",pin_name=cmds[2]).update()pkglineflag#-----pkglineflagdef measure(cmds,is_print=True):pkglineflag    blueprint=PinCommands(cmds,config_path,pin_type='hcsr04').get_pin('hcsr04',cmds[2])pkglineflag    my_hcsr04 = HCSR04(int(blueprint[\"--trig\"]),int(blueprint[\"--echo\"]),int(blueprint[\"--echo_timeout\"]))pkglineflag    if blueprint[\"--unit\"] == \"cm\":pkglineflag        value=my_hcsr04.distance_cm()pkglineflag    elif blueprint[\"--unit\"] == \"mm\":pkglineflag        value=my_hcsr04.distance_mm()pkglineflag    elif blueprint[\"--unit\"] == \"inch\":pkglineflag        value=my_hcsr04.distance_inch()pkglineflag    else:pkglineflag        HCSR04Errors.unknown_unit_error(blueprint[\"--unit\"])pkglineflag        value = -1pkglineflag    if value < 0:pkglineflag        value = \"Out of range\"pkglineflag    if is_print:pkglineflag        print(value)pkglineflag    return valuepkglineflag    pkglineflagdef listen(cmds):pkglineflag    if not len(cmds) > 2:pkglineflag        LOG.error(\"Please enter pin name!\")pkglineflag        returnpkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--date\":\"1\",\"--end\":\"\\n\",\"--loop\":\"-1\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf = {'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'hcsr04_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"hcsr04\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _gooz_start_function_thread(_hcsr04_listen_thread,(pin,listen_conf),thread_conf)pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise expkglineflag    del listen_confpkglineflag    del thread_confpkglineflag    pkglineflagdef _hcsr04_listen_thread(pins,conf={}):pkglineflag    try:pkglineflag        value = measure(['hcsr04','measure',pins[\"--name\"]],False)pkglineflag        if conf[\"--file\"] == \"\":pkglineflag            print(\"{}: {}\".format(pins['--name'],value))pkglineflag        else:pkglineflag            if conf[\"--date\"] == \"1\":pkglineflag                m_rtc = RTC()pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"{} {}{}\".format(value,m_rtc.datetime(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag            else:pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"{}{}\".format(value,conf[\"--end\"]))pkglineflag                f.close()pkglineflag    except Exception as ex:pkglineflag        LOG.error(ex)pkglineflag        raise ex"
        }
    ]
}
