{
    "name": "hcsr04",
    "codes": [
        {
            "filename": "hcsr04lib.py",
            "code": "from machine import Pin, time_pulse_uspkglineflagimport utimepkglineflagpkglineflagpkglineflagclass HCSR04:pkglineflag    def __init__(self, trig_pin, echo_pin, echo_timeout=30000):pkglineflag        self.trigger = Pin(trig_pin, Pin.OUT, pull=None)pkglineflag        self.trigger.value(0)pkglineflag        self.echo_timeout = echo_timeoutpkglineflag        self.echo = Pin(echo_pin, Pin.IN, pull=None)pkglineflagpkglineflag    def send_and_wait(self):pkglineflag        self.trigger.value(0)pkglineflag        utime.sleep_us(5)pkglineflag        self.trigger.value(1)pkglineflagpkglineflag        pulse_time = time_pulse_us(self.echo, 1, self.echo_timeout)pkglineflag        return pulse_timepkglineflagpkglineflag    def distance_cm(self):pkglineflag        pulse_time = self.send_and_wait()pkglineflag        cm = (pulse_time/2)/29.1pkglineflag        return cmpkglineflagpkglineflag    def distance_mm(self):pkglineflag        pulse_time = self.send_and_wait()pkglineflag        mm = (pulse_time*100)//582pkglineflag        return mmpkglineflagpkglineflag    def distance_inch(self):pkglineflag        inch = self.distance_cm()*0.3937007874pkglineflag        return inchpkglineflag"
        },
        {
            "filename": "main.py",
            "code": "from app.hcsr04.hcsr04lib import HCSR04pkglineflagfrom wifuxlogger import WifuxLogger as LOGpkglineflagfrom machine import Pin,RTCpkglineflagfrom dev.pin.core import CommonCommands as PinCommands pkglineflagfrom engine.engine_template import EngineTemplatepkglineflagfrom dev.tool.gooz_thread import _gooz_start_function_threadpkglineflagconfig_path=\"//app/hcsr04/hcsr04config.json\"pkglineflagexit_listen_flag = Falsepkglineflagpkglineflagpkglineflagclass HCSR04Usage():pkglineflag    @staticmethodpkglineflag    def var_usage():pkglineflag        message = \"\"pkglineflag        message = LOG.info('Usage -> hcsr04 var --name [PIN_NAME] --trig [TRIG_PIN_NUMBER] --echo [ECHO_PIN_NUMBER] --echo_timeout [ECHO_TIMEOUT]') + '\\n'pkglineflag        message += LOG.info('Default echo_timeout : 20000')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def listen_usage():pkglineflag        message = \"\"pkglineflag        message = LOG.info('Usage -> hcsr04 listen [PIN_NAME] --delay [SLEEP_TIME] --file [FILE_NAME] --end [END_CHARACTER]') + '\\n'pkglineflag        message += LOG.info('[SLEEP_TIME] is not necessary! Default value: 1 second') + '\\n'pkglineflag        message += LOG.info(\"[FILE_NAME] is not necessary! If empty it will not be saved\") + '\\n'pkglineflag        message += LOG.info(\"[END_CHARACTER] is not necessary! Default value: '\\\\n' \")pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def update_usage():pkglineflag        return LOG.info('Usage -> hcsr04 update [PIN_NAME] --[VALUE_TO_CHANGE] [NEW_VALUE]')+'\\n'+LOG.info('updates the [VALUE_TO_CHANGE] value of the HCSR04 named [PIN_NAME] to [NEW_VALUE]')pkglineflagpkglineflag    @staticmethodpkglineflag    def delete_usage():pkglineflag        message = \"\"pkglineflag        message = LOG.info('Usage -> hcsr04 delete [PIN_NAME]') + '\\n'pkglineflag        message += LOG.info('hcsr04 delete command deletes registered hcsr04 pins by pin_name')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def show_usage():pkglineflag        message = \"\"pkglineflag        message = LOG.info('Usage -> hcsr04 show') + '\\n'pkglineflag        message += LOG.info('hcsr04 show command simply prints registered hcsr04 pins')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def measure_usage():pkglineflag        message = \"\"pkglineflag        message = LOG.info('Usage -> hcsr04 measure [PIN_NAME]') +'\\n'pkglineflag        message += LOG.info('Prints the current distance of the given HCSR04 Sensor')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def unknown_unit_error(unit):pkglineflag        message = \"\"pkglineflag        message = LOG.error('The \"{}\" as unit is unknown!') + '\\n'pkglineflag        message += LOG.info('Unit can be \"cm\" \"mm\" or \"inch\"')pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def float_error(sleep_time):#sleep time must be floatpkglineflag        message = \"\"pkglineflag        message = LOG.error('Error while listening hcsr04 Pin!') + '\\n'pkglineflag        message += LOG.error('Is type of \"{}\" a float?'.format(sleep_time))pkglineflag        return messagepkglineflag    pkglineflag    @staticmethodpkglineflag    def undefined_pin_name(pin_name):pkglineflag        return LOG.error('There is no hcsr04 pin named \"{}\" !'.format(pin_name))pkglineflag    pkglineflagpkglineflagdef help(cmds):   pkglineflag    message = \"\"pkglineflag    command_list = ['var','show','delete','update','measure','listen']pkglineflag    if not len(cmds) > 2:pkglineflag        for command in command_list:pkglineflag            message += commandpkglineflag            message += '\\n'pkglineflag        return 'Commands:\\n'+message+LOG.info('For more information about commands -> hcsr04 help [COMMAND]')pkglineflag    try:pkglineflag        return eval('HCSR04Usage.{}_usage()'.format(cmds[2]))pkglineflag    except:pkglineflag        return LOG.error('There is no help for \"{}\"!'.format(cmds[2]))pkglineflag    pkglineflagpkglineflagdef run(cmds):pkglineflag    if not len(cmds)>1:pkglineflag        return LOG.error(\"Please enter a command!\")+'\\n'+LOG.info(\"You can use 'hcsr04 help' for available commands!\")pkglineflag    if cmds[1][0] == '_':pkglineflag        return \"ERROR\"pkglineflag    try:pkglineflag        return eval(\"{}({})\".format(cmds[1],EngineTemplate.exec_formatter_api(cmds)))pkglineflag    except NameError:pkglineflag        return LOG.error(\"There is a problem while running HCSR04 command\")+'\\n'+LOG.error(f'Is the \"{cmds[1]}\" a HCSR04 command?')+'\\n'+LOG.info(\"You can use 'hcsr04 help' for available commands!\")pkglineflag    except Exception as ex:pkglineflag        return LOG.error(\"There is a problem while running HCSR04 command!\")+'\\n'+LOG.error(ex)+'\\n'+LOG.error(\"You can use 'hcsr04 help' for available commands!\")pkglineflagpkglineflag#------pkglineflagdef var(cmds):pkglineflag    blueprint={\"pinType\":\"hcsr04\",\"--name\":\"\",\"--trig\":\"\",\"--echo\":\"\",\"--unit\":\"cm\",\"--echo_timeout\":\"20000\"}pkglineflag    missing_arg = Falsepkglineflag    temp = EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    for key in temp:pkglineflag        if temp[key] == \"\":pkglineflag            missing_arg = Truepkglineflag            return LOG.error('Error while registering HCSR04 pin!')+'\\n'+LOG.error('Missing Argument(s)!')pkglineflag    pkglineflag    PinCommands(cmds, path=config_path,pin_type=\"hcsr04\").register(blueprint)pkglineflag    return LOG.debug('The new HCSR04 pin named \"{}\" successfully saved:\\n{}'.format(blueprint[\"--name\"],blueprint))pkglineflagpkglineflagpkglineflagdef delete(cmds):pkglineflag    return PinCommands(cmds, path=config_path, pin_type=\"hcsr04\", pin_name=cmds[2]).delete()pkglineflag        pkglineflag        pkglineflagdef update(cmds):pkglineflag    return PinCommands(cmds,config_path,pin_type=\"hcsr04\",pin_name=cmds[2]).update()pkglineflagpkglineflagpkglineflagdef show(cmds):pkglineflag    return PinCommands(cmds,path=config_path,pin_type=\"hcsr04\").show()pkglineflagpkglineflag    pkglineflagdef measure(cmds,is_print=True):pkglineflag    message = \"\"pkglineflag    blueprint = PinCommands(cmds,config_path,pin_type='hcsr04').get_pin('hcsr04',cmds[2])pkglineflag    my_hcsr04 = HCSR04(int(blueprint[\"--trig\"]),int(blueprint[\"--echo\"]),int(blueprint[\"--echo_timeout\"]))pkglineflag    if blueprint[\"--unit\"] == \"cm\":pkglineflag        value = my_hcsr04.distance_cm()pkglineflag    elif blueprint[\"--unit\"] == \"mm\":pkglineflag        value = my_hcsr04.distance_mm()pkglineflag    elif blueprint[\"--unit\"] == \"inch\":pkglineflag        value = my_hcsr04.distance_inch()pkglineflag    else:pkglineflag        return HCSR04Errors.unknown_unit_error(blueprint[\"--unit\"])pkglineflag    if '-n' in cmds:pkglineflag        if value < 0:pkglineflag            return str(0)pkglineflag        return str(value)pkglineflag    if value < 0:pkglineflag        return LOG.warning(\"The distance is couldn't be measured.\")pkglineflag    return LOG.info(value)pkglineflag    pkglineflag    pkglineflagdef listen(cmds):pkglineflag    if not len(cmds) > 2:pkglineflag        return LOG.error(\"Please enter pin name!\")pkglineflag    blueprint={\"--delay\":\"1\",\"--file\":\"\",\"--date\":\"1\",\"--end\":\"\\n\",\"--loop\":\"-1\"}pkglineflag    listen_conf=EngineTemplate.parameter_parser(cmds,blueprint)pkglineflag    thread_conf = {'delay':listen_conf['--delay'],'loop':listen_conf['--loop'],'type':'hcsr04_listen','pin_name':cmds[2]}pkglineflag    del blueprintpkglineflag    pin = PinCommands(cmds,path=config_path,pin_type=\"hcsr04\").get_pin(cmds[0],cmds[2])pkglineflag    try:pkglineflag        _gooz_start_function_thread(_hcsr04_listen_thread,(pin,listen_conf),thread_conf)pkglineflag    except Exception as ex:pkglineflag        del listen_confpkglineflag        del thread_confpkglineflag        return LOG.error(ex)pkglineflag    del listen_confpkglineflag    del thread_confpkglineflag    return \"OK\"pkglineflag    pkglineflag    pkglineflagdef _hcsr04_listen_thread(pins,conf={}):pkglineflag    try:pkglineflag        value = measure(['hcsr04','measure',pins[\"--name\"]],False)pkglineflag        if conf[\"--file\"] == \"\":pkglineflag            print(\"{}: {}\".format(pins['--name'],value))pkglineflag        else:pkglineflag            if conf[\"--date\"] == \"1\":pkglineflag                m_rtc = RTC()pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"{} {}{}\".format(value,m_rtc.datetime(),conf[\"--end\"]))pkglineflag                f.close()pkglineflag            else:pkglineflag                f = open(conf[\"--file\"],\"a\")pkglineflag                f.write(\"{}{}\".format(value,conf[\"--end\"]))pkglineflag                f.close()pkglineflag    except Exception as ex:pkglineflag        print(LOG.error(ex))pkglineflag"
        }
    ]
}